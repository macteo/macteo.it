{
    "version": "https://jsonfeed.org/version/1",
    "title": "Matteo Gavagnin",
    "home_page_url": "http://0.0.0.0:4000/",
    "feed_url": "http://0.0.0.0:4000/feed.json",
    "icon": "http://0.0.0.0:4000/assets/images/favicon/dolomate-180.png",
    "favicon": "http://0.0.0.0:4000/assets/images/favicon/favicon.ico",
    "expired": false,
    "items": [
    
        {
            "id": "http://0.0.0.0:4000/ios/2017/09/28/face-id.html",
            "title": "Face ID",
            "summary": "",
            "content_text": "Apple in their Human Interface Guidelines asks developers to avoid using custom Face ID and Touch ID icons:  Don’t use custom icons to identify system authentication features. When people see icons that look like the system’s Touch ID (thumbprint) and Face ID icons, they think they’re supposed to authenticate. Custom variants of these icons create inconsistency and cause confusion, especially when colorized, displayed at a large size, and presented out of context—like as a button label or on an app’s Settings screen.However they don’t provide such standard assets.I’m not a designer but it took me few minutes to recreate the Face ID logo.You can download the Sketch file and png, svg and pdf versions from the link below.Download the Face ID package.Update: Apple published a new page dedicated to iPhone X support that clarify their position.  Verify your Touch ID code works for Face ID. If your app currently uses Touch ID, update text strings to refer to Face ID when running on iPhone X – for example, “Sign in with Face ID.”  Avoid using icons to represent Face ID and Touch ID.So you should not use an icon to le users login with Touch ID or Face ID, but prefer a text button.",
            "content_html": "<p>Apple in their <a href=\"https://developer.apple.com/ios/human-interface-guidelines/user-interaction/authentication/\">Human Interface Guidelines</a> asks developers to avoid using custom Face ID and Touch ID icons:</p><blockquote>  <p><strong>Don’t use custom icons to identify system authentication features.</strong> When people see icons that look like the system’s Touch ID (thumbprint) and Face ID icons, they think they’re supposed to authenticate. Custom variants of these icons create inconsistency and cause confusion, especially when colorized, displayed at a large size, and presented out of context—like as a button label or on an app’s Settings screen.</p></blockquote><p>However they don’t provide such standard assets.</p><p>I’m not a designer but it took me few minutes to recreate the Face ID logo.</p><p>You can download the Sketch file and png, svg and pdf versions from the link below.</p><p><img src=\"http://0.0.0.0:4000/assets/images/faceid.png#center320s\" alt=\"Face ID\" /></p><p><a href=\"http://macteo.it/assets/data/faceid.zip\">Download the Face ID package</a>.</p><p><strong>Update</strong>: Apple published a <a href=\"https://developer.apple.com/ios/update-apps-for-iphone-x/\">new page</a> dedicated to iPhone X support that clarify their position.</p><blockquote>  <p>Verify your Touch ID code works for Face ID. If your app currently uses Touch ID, update text strings to refer to Face ID when running on iPhone X – for example, “Sign in with Face ID.”</p>  <p><strong>Avoid using icons to represent Face ID and Touch ID</strong>.</p></blockquote><p>So you should not use an icon to le users login with Touch ID or Face ID, but prefer a text button.</p>",
            "url": "http://0.0.0.0:4000/ios/2017/09/28/face-id.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/faceid-c.png",
            
            
            
            
            "tags": [
                
                  "iOS",
                
                  "FaceID",
                
                  "iPhoneX"
                
            ],
            
            "date_published": "2017-09-28T20:55:00+02:00",
            "date_modified": "2017-09-28T20:55:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/macos/2017/09/21/6-colors-wallpapers.html",
            "title": "6 colors Wallpapers",
            "summary": "",
            "content_text": "I’m in love with the new six colors iOS 11 wallpapers so I’ve created the larger macOS versions.They’re available with different background colors (black, white, green, yellow, orange, red, purple and blue) and optimized for 2K, 4K, 5K and 8K resolutions.You can download them from the link below the two examples.Download the wallpapers.",
            "content_html": "<p>I’m in love with the new six colors <em>iOS 11</em> wallpapers so I’ve created the larger <em>macOS</em> versions.</p><p>They’re available with different background colors (black, white, green, yellow, orange, red, purple and blue) and optimized for 2K, 4K, 5K and 8K resolutions.</p><p>You can download them from the link below the two examples.</p><p><img src=\"http://0.0.0.0:4000/assets/images/6colors/6colors-blue.png#center100s\" alt=\"6colors orange\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/6colors/6colors-red.png#center100s\" alt=\"6colors orange\" /></p><p><a href=\"http://macteo.it/assets/data/6colors.zip\">Download the wallpapers</a>.</p>",
            "url": "http://0.0.0.0:4000/macos/2017/09/21/6-colors-wallpapers.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/6colors.png",
            
            
            
            
            "tags": [
                
                  "macOS",
                
                  "wallpapers",
                
                  "apple"
                
            ],
            
            "date_published": "2017-09-21T04:15:00+02:00",
            "date_modified": "2017-09-21T04:15:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/ios/2017/09/03/splitkit.html",
            "title": "SplitKit",
            "summary": "",
            "content_text": "Resizable splitted view for iOS.Today I’ve released SplitKit, a sigle file component that does just one thing: let you place two views side by side or bottom to top.Heavily inspired by the Swift Playgrounds app for iPad, SplitKit gives you the ability to easily present two UIViews side by side (or stacked one on top of the other) baked by different UIViewControllers. Everything is implemented in a single .swift file to easily drop it in in existing projects. CocoaPods, Carthage and plain Dynamic Framework are supported as well for your convenience. The end user has the ability to resize the views just dragging the separator like each macOS counterpart, when the drag is performed a convenient handle appears to highlight the resizing operation. If the separator is really close to one of the edges, it will snap to it with an enjoyable animation and the handle won’t disappear to highlight the hidden view position.Features:  Horizontal and vertical layouts: one beside the other and one on top of the other.  Customisable separator and handle: choose the color you prefer to match your app style.  Draggable handle to resize the views on the fly.  Snap to the closest edge.  Automatically keyboard dismiss if the keyboard top margin is crossed while resizing.  Support iOS 9 leveraging topLayoutGuide and bottomLayoutGuide through iOS 11 and the new safeAreaLayoutGuide.It has been written during a single weekend so it can be definitely improved.Let me know if you find any issue or have a suggestion.",
            "content_html": "<p>Resizable splitted view for iOS.</p><p>Today I’ve released <a href=\"https://github.com/macteo/splitkit\">SplitKit</a>, a sigle file component that does just one thing: let you place two views side by side or bottom to top.</p><p><img src=\"https://raw.githubusercontent.com/macteo/SplitKit/master/Assets/Export/splitkit-title.png#center100s\" alt=\"SplitKit Title\" /></p><p>Heavily inspired by the Swift Playgrounds app for iPad, <em>SplitKit</em> gives you the ability to easily present two <code class=\"highlighter-rouge\">UIView</code>s side by side (or stacked one on top of the other) baked by different <code class=\"highlighter-rouge\">UIViewControllers</code>. Everything is implemented in a single <em>.swift</em> file to easily drop it in in existing projects. CocoaPods, Carthage and plain Dynamic Framework are supported as well for your convenience. The end user has the ability to resize the views just dragging the separator like each macOS counterpart, when the drag is performed a convenient handle appears to highlight the resizing operation. If the separator is really close to one of the edges, it will snap to it with an enjoyable animation and the handle won’t disappear to highlight the hidden view position.</p><p><img src=\"https://raw.githubusercontent.com/macteo/splitkit/master/Assets/GIFs/splitkit.gif#center100s\" alt=\"SplitKit GIF\" /></p><h2 id=\"features\">Features:</h2><ul>  <li>Horizontal and vertical layouts: one beside the other and one on top of the other.</li>  <li>Customisable separator and handle: choose the color you prefer to match your app style.</li>  <li>Draggable handle to resize the views on the fly.</li>  <li>Snap to the closest edge.</li>  <li>Automatically keyboard dismiss if the keyboard top margin is crossed while resizing.</li>  <li>Support iOS 9 leveraging <code class=\"highlighter-rouge\">topLayoutGuide</code> and <code class=\"highlighter-rouge\">bottomLayoutGuide</code> through iOS 11 and the new <code class=\"highlighter-rouge\">safeAreaLayoutGuide</code>.</li></ul><p>It has been written during a single weekend so it can be definitely improved.</p><p>Let me know if you find any issue or have a suggestion.</p>",
            "url": "http://0.0.0.0:4000/ios/2017/09/03/splitkit.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/splitkit.png",
            
            
            
            
            "date_published": "2017-09-03T18:36:00+02:00",
            "date_modified": "2017-09-03T18:36:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/speech/2017/07/22/speck-and-tech.html",
            "title": "Speck&Tech",
            "summary": "",
            "content_text": "I’ll be one of the speakers at the next Speck&amp;amp;Tech event in Trento on July 27th, 2017.This is the abstract of the talk.WWDC - World Wide Developer ConferenceEach year a city in California becomes the Mecca for developers, journalists and engineers working or passionate about Apple’s products. If you are interested in technology that’s where new features and improvements for Apple’s platforms are presented, discussed and dissected. In this speech you’ll understand how the conference and related events are structured, why you should consider to apply for a ticket or a free scholarship and mostly learn of interesting gems announced during WWDC17, that will be leveraged by developers to create amazing new apps and features used by hundreds of millions of people.Matteo Gavagnin during WWDC 2014The BIO drafted for the eventMatteo Gavagnin is a husband and father of two sons that lives in Trento. He was born in Venice in 1983, just in time for the launch of the Macintosh 35 days later. He started tinkering with a Mac Plus since he was three and never stopped. He got a master degree in Environmental Engineering, but during the college he also started a career in software development kicked by the release of the iPhone in 2007. After several adventures he’s leading the mobile development team in DIMENSION since 2014. He had the luck to attend WWDC five times.",
            "content_html": "<p>I’ll be one of the speakers at the next <a href=\"https://speckand.tech\">Speck&amp;Tech</a> event in Trento on July 27th, 2017.</p><p>This is the abstract of the talk.</p><h5 id=\"wwdc---world-wide-developer-conference\">WWDC - World Wide Developer Conference</h5><p>Each year a city in California becomes the Mecca for developers, journalists and engineers working or passionate about Apple’s products. If you are interested in technology that’s where new features and improvements for Apple’s platforms are presented, discussed and dissected. In this speech you’ll understand how the conference and related events are structured, why you should consider to apply for a ticket or a free scholarship and mostly learn of interesting gems announced during WWDC17, that will be leveraged by developers to create amazing new apps and features used by hundreds of millions of people.</p><p><img src=\"http://0.0.0.0:4000/assets/images/star-wars.jpg#center100s\" alt=\"Matteo Gavagnin during WWDC 2014\" /><em>Matteo Gavagnin during WWDC 2014</em></p><h5 id=\"the-bio-drafted-for-the-event\">The BIO drafted for the event</h5><p><a href=\"https://macteo.it\">Matteo Gavagnin</a> is a husband and father of two sons that lives in Trento. He was born in Venice in 1983, just in time for the launch of the Macintosh 35 days later. He started tinkering with a Mac Plus since he was three and never stopped. He got a master degree in Environmental Engineering, but during the college he also started a career in software development kicked by the release of the iPhone in 2007. After several adventures he’s leading the mobile development team in DIMENSION since 2014. He had the luck to attend WWDC five times.</p>",
            "url": "http://0.0.0.0:4000/speech/2017/07/22/speck-and-tech.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/speck&tech.png",
            
            
            
            
            "tags": [
                
                  "speech",
                
                  "speck&tech"
                
            ],
            
            "date_published": "2017-07-22T11:00:00+02:00",
            "date_modified": "2017-07-22T11:00:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/map/2017/06/03/hiking-map.html",
            "title": "Hiking Map",
            "summary": "",
            "content_text": "I’m building modern digital map suitable for hiking in the Alps as the existing ones are lacking too many basic features that you usually need if you are outdoor in the mountains.The map above is my reference one: it’s manually drawn by Tabacco and it can be considered the state of the art for paper maps of the Alps. Many other vendors are offering those kind of maps, however the digital versions, when available, have so many drawbacks that the paper ones are always preferable.Those were my base requirements:  Mobile first: available at least on iOS (as it’s the platform I use), better if also on Android.  Offline: I should be able to go for a hike with my phone with the map already cached for offline use during the whole trip even without internet connection.  Retina screen support.  Position: should be able to overlay my current GPS position.  Minimal memory footprint.  Beautiful: I want it to look great!  POI: alpine huts, bivouacs, shelters, inns, hotels, belied paths, peak names and altitude, city names, river names, hospitals, paths numbers, terrain coverage, paths scale, camping sites, information signs, parkings, scale, no vehicle admitted signs, rivers, lakes, waterfalls, springs, fountains, drinking trough, wood, altitude, houses, huts, ruins, bus stops, funiculars, cabin lifts, chair-lifts, ski lifts, passes and saddles, hospitals.  Contours: view elevation lines.  Hill shades: mountain profiles to better perceive your surroundings.And few bonus points:  Record my route and save it for later.  Load previously recorder routes on top of base map.  Select a path and see the altimetry chart before going along it.  Search for POIs.  Use vector tiles to limit data transfer, improve readability and performances.  Based on Open Street Map data.  Continuously updated.  Optional 3D view with terrain elevation.DesolationThere isn’t any map provider that has realised a compelling digital map fulfilling my base requirements, so the only solution is to understand if I can build one myself.Where to start?Open Street Map represents the state of the art of collaboration designing great maps and Mapbox is the leading company contributing to the project development with a thriving set of modern tools, openly released to the community with the permissive MIT licenses.Mapbox open source contributions  iD Editor founded by The Knight Foundation.  Mapbox GL js Interactive, thoroughly customisable maps in the browser, powered by vector tiles and WebGL.  Mapbox GL native Interactive, thoroughly customisable maps in native Android, iOS, macOS, Node.js, and Qt applications, powered by vector tiles and OpenGL.  Mapbox Navigation iOS Turn-by-turn navigation logic and UI in Swift or Objective-C on iOS.Mapbox commercial products  Mapbox  Maps are based on vector tiles, an advanced approach to mapping where data is delivered to the device and precisely rendered in real-time. The result is smooth, fast maps.  Directions Smart turn-by-turn routing based on crowdsourced real-time traffic.  Mapbox Studio Design custom maps that fit seamlessly in your application.  Geocoding Turn your coordinates into addresses or your addresses into coordinates.  Satellite Full global base map that is perfect as a blank canvas or an overlay for your own data.  Developer Tools native SDKs and remote APIs like Directions, Map Matching, Distance and many more.LimitsThe biggest limit that prevents me to use the OpenStreetMap data directly through the Mapbox platform is that Mapbox exposes a subset of the informations available on the OpenStreetMap database.For example every mountain trail usually has an attribute called sac_scale that based on the reference guidelines can assume different values:  T1 - Hiking: trail well cleared.  T2 - Mountain Hiking: trail with continuous line and balanced ascent.  T3 - Demanding Mountain Hiking: exposed sites may be secured with ropes or chains, possible need to use hands for balance.  T4 - Alpine hiking: sometimes need for hand use to get ahead.  T5 - Demanding alpine hiking: single plainly climbing up to second grade.  T6 - Difficult alpine hiking: climbing up to second grade.Trails should be rendered on the map with different colours and sometimes dashes or points as you can see on the Tabacco map: trails are red continuous or dashed lines, sometimes white if large enough.Similar issues needs to be faced for other mountain routes like vie ferrate or for the seasonality of mountain huts that require different icons, downhill ski paths (piste) are differentiated by difficulty and uphill aerialways should be classified based on their type.Approach and initial resultsIt’s a long way to go and at the moment I’ve only identified the flow to gather the desired informations and render the digital map. The goal is to build on top of the open source tools offered by MapBox combined with the toolchain provided by OpenMapTiles, modifying them as needed. Source data is gathered at the moment from OpenStreetMap and other public sources like USGS SRTM and EU-DEM.I’m releasing everything as open source on GitHub to respect the licenses so anyone can eventually build on top of my work and once the flow has settled I plan to organise the different repos and write a tutorial to replicate the effort.The image below reflects the current results (v0.3) and it’s definitely still lacking many informations, but it’s a start.In order to speed up the development and get better performances I’m using the area with this bounding box 11.90000, 46.27185, 12.19625, 46.69510.Progresses with detailed changelog are available for the reference area over at map.macteo.it.In the second part of this post (still unpublished) I’m going to enumerate different tools and technologies I’m using to render and serve the map.",
            "content_html": "<p>I’m building modern digital map suitable for hiking in the Alps as the existing ones are lacking too many basic features that you usually need if you are outdoor in the mountains.</p><p><img src=\"http://0.0.0.0:4000/assets/images/hiking-map/Tabacco~015.jpg#center100s\" alt=\"Tabacco Reference image\" /></p><p>The map above is my reference one: it’s manually drawn by <a href=\"http://www.tabaccoeditrice.it/eng/azienda.asp\">Tabacco</a> and it can be considered the state of the art for paper maps of the Alps. Many other vendors are offering those kind of maps, however the digital versions, when available, have so many drawbacks that the paper ones are always preferable.</p><h5 id=\"those-were-my-base-requirements\">Those were my base requirements:</h5><ul>  <li>Mobile first: available at least on iOS (as it’s the platform I use), better if also on Android.</li>  <li>Offline: I should be able to go for a hike with my phone with the map already cached for offline use during the whole trip even without internet connection.</li>  <li>Retina screen support.</li>  <li>Position: should be able to overlay my current GPS position.</li>  <li>Minimal memory footprint.</li>  <li>Beautiful: I want it to look great!</li>  <li>POI: alpine huts, bivouacs, shelters, inns, hotels, belied paths, peak names and altitude, city names, river names, hospitals, paths numbers, terrain coverage, paths scale, camping sites, information signs, parkings, scale, no vehicle admitted signs, rivers, lakes, waterfalls, springs, fountains, drinking trough, wood, altitude, houses, huts, ruins, bus stops, funiculars, cabin lifts, chair-lifts, ski lifts, passes and saddles, hospitals.</li>  <li>Contours: view elevation lines.</li>  <li>Hill shades: mountain profiles to better perceive your surroundings.</li></ul><h5 id=\"and-few-bonus-points\">And few bonus points:</h5><ul>  <li>Record my route and save it for later.</li>  <li>Load previously recorder routes on top of base map.</li>  <li>Select a path and see the altimetry chart before going along it.</li>  <li>Search for POIs.</li>  <li>Use vector tiles to limit data transfer, improve readability and performances.</li>  <li>Based on Open Street Map data.</li>  <li>Continuously updated.</li>  <li>Optional 3D view with terrain elevation.</li></ul><h5 id=\"desolation\">Desolation</h5><p>There isn’t any map provider that has realised a compelling digital map fulfilling my base requirements, so the only solution is to understand if I can build one myself.</p><h5 id=\"where-to-start\">Where to start?</h5><p><a href=\"http://openstreetmap.org\">Open Street Map</a> represents the state of the art of collaboration designing great maps and <a href=\"https://www.mapbox.com\">Mapbox</a> is the leading company contributing to the project development with a thriving set of modern tools, openly released to the community with the permissive MIT licenses.</p><h6 id=\"mapbox-open-source-contributions\">Mapbox open source contributions</h6><ul>  <li><a href=\"https://www.mapbox.com/blog/id-editor-sneak-peek/\">iD Editor</a> founded by <a href=\"http://mapbox.com/blog/knight-invests-openstreetmap/\">The Knight Foundation</a>.</li>  <li><a href=\"https://github.com/mapbox/mapbox-gl-js\">Mapbox GL js</a> Interactive, thoroughly customisable maps in the browser, powered by vector tiles and WebGL.</li>  <li><a href=\"https://github.com/mapbox/mapbox-gl-native\">Mapbox GL native</a> Interactive, thoroughly customisable maps in native Android, iOS, macOS, Node.js, and Qt applications, powered by vector tiles and OpenGL.</li>  <li><a href=\"https://github.com/mapbox/mapbox-navigation-ios\">Mapbox Navigation iOS</a> Turn-by-turn navigation logic and UI in Swift or Objective-C on iOS.</li></ul><h6 id=\"mapbox-commercial-products\">Mapbox commercial products</h6><ul>  <li><a href=\"https://www.mapbox.com/maps/\">Mapbox  Maps</a> are based on vector tiles, an advanced approach to mapping where data is delivered to the device and precisely rendered in real-time. The result is smooth, fast maps.</li>  <li><a href=\"https://www.mapbox.com/directions/\">Directions</a> Smart turn-by-turn routing based on crowdsourced real-time traffic.</li>  <li><a href=\"https://www.mapbox.com/mapbox-studio/\">Mapbox Studio</a> Design custom maps that fit seamlessly in your application.</li>  <li><a href=\"https://www.mapbox.com/geocoding/\">Geocoding</a> Turn your coordinates into addresses or your addresses into coordinates.</li>  <li><a href=\"https://www.mapbox.com/maps/satellite/\">Satellite</a> Full global base map that is perfect as a blank canvas or an overlay for your own data.</li>  <li><a href=\"https://www.mapbox.com/developers/\">Developer Tools</a> native SDKs and remote APIs like Directions, Map Matching, Distance and many more.</li></ul><h5 id=\"limits\">Limits</h5><p>The biggest limit that prevents me to use the OpenStreetMap data directly through the Mapbox platform is that Mapbox exposes a subset of the informations available on the OpenStreetMap database.</p><p>For example every mountain trail usually has an attribute called <a href=\"http://www.sac-cas.ch/nc/unterwegs/schwierigkeits-skalen.html?cid=1512&amp;did=1000352&amp;sechash=bdae41d3\"><code class=\"highlighter-rouge\">sac_scale</code></a> that <a href=\"http://wiki.openstreetmap.org/wiki/Key:sac_scale\">based on the reference guidelines</a> can assume different values:</p><ul>  <li>T1 - Hiking: trail well cleared.</li>  <li>T2 - Mountain Hiking: trail with continuous line and balanced ascent.</li>  <li>T3 - Demanding Mountain Hiking: exposed sites may be secured with ropes or chains, possible need to use hands for balance.</li>  <li>T4 - Alpine hiking: sometimes need for hand use to get ahead.</li>  <li>T5 - Demanding alpine hiking: single plainly climbing up to second grade.</li>  <li>T6 - Difficult alpine hiking: climbing up to second grade.</li></ul><p>Trails should be rendered on the map with different colours and sometimes dashes or points as you can see on the Tabacco map: trails are red continuous or dashed lines, sometimes white if large enough.</p><p>Similar issues needs to be faced for other mountain routes like <em>vie ferrate</em> or for the seasonality of mountain huts that require different icons, downhill ski paths (<a href=\"http://wiki.openstreetmap.org/wiki/Piste_Maps\">piste</a>) are differentiated by difficulty and uphill <a href=\"http://wiki.openstreetmap.org/wiki/Key:aerialway\">aerialways</a> should be classified based on their type.</p><h5 id=\"approach-and-initial-results\">Approach and initial results</h5><p>It’s a long way to go and at the moment I’ve only identified the flow to gather the desired informations and render the digital map. The goal is to build on top of the open source tools offered by <a href=\"https://www.mapbox.com\">MapBox</a> combined with the toolchain provided by <a href=\"https://openmaptiles.org\">OpenMapTiles</a>, modifying them as needed. Source data is gathered at the moment from <a href=\"https://www.openstreetmap.org\">OpenStreetMap</a> and other public sources like <a href=\"https://lta.cr.usgs.gov/SRTM1Arc\">USGS SRTM</a> and <a href=\"https://www.eea.europa.eu/data-and-maps/data/eu-dem\">EU-DEM</a>.I’m releasing everything as open source on <a href=\"http://github.com/macteo\">GitHub</a> to respect the licenses so anyone can eventually build on top of my work and once the flow has settled I plan to organise the different repos and write a tutorial to replicate the effort.</p><p>The image below reflects the current results (<a href=\"https://map.macteo.it/styles/tralio-0.3.0/#14.1/46.4363/12.0728\">v0.3</a>) and it’s definitely still lacking many informations, but it’s a start.</p><p><img src=\"http://0.0.0.0:4000/assets/images/hiking-map/tralio-0.3.jpg#center100s\" alt=\"Tralio-0.3\" /></p><p>In order to speed up the development and get better performances I’m using the area with this bounding box 11.90000, 46.27185, 12.19625, 46.69510.</p><p>Progresses with detailed changelog are available for the reference area over at <a href=\"https://map.macteo.it\">map.macteo.it</a>.</p><p><img src=\"http://0.0.0.0:4000/assets/images/hiking-map/map-zomm-pitch.gif#center100s\" alt=\"Zoom and Pitch\" /></p><p>In the second part of this post (still unpublished) I’m going to enumerate different tools and technologies I’m using to render and serve the map.</p>",
            "url": "http://0.0.0.0:4000/map/2017/06/03/hiking-map.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/hiking-map.png",
            
            
            
            
            "tags": [
                
                  "map",
                
                  "mapbox"
                
            ],
            
            "date_published": "2017-06-03T16:12:00+02:00",
            "date_modified": "2017-06-03T16:12:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/wwdc/2017/05/30/wwdc-hardware-predictions.html",
            "title": "WWDC Hardware Predictions",
            "summary": "",
            "content_text": "In less than a week Apple WWDC’s Keynote will take place and they will unveil some new stuff to 5000 developers (myself included) plus a bunch of journalists.WWDC – World Wide Developer Conference, as the name implies, is a conference for developers and in recent years Apple unveiled only software: namely new major iOS, macOS, watchOS and tvOS versions. The last hardware announced was the now infamous trash can Mac Pro in June 2013 that was eventually released in December of the same year. The previous year the (at the time new) MacBook Pro with Retina Display was announced and released on the same day.This year however there are much more rumors than usual on possible new or updated hardware releases.I’ve created a simple poll to gather your opinions. You can find it embedded below or visiting Pollover1.You can choose one ore more options and with a single tap cast your vote.Let me know what do you think!  You’ll be able to vote as soon as the Keynote starts on Monday June 5.I’m hoping for a new iMac with renewed hardware and new design, but it seems that it will be out later this year.            Pollover is a side project, not much more than an experiment at the moment to quickly create Polls and collect opinions. &amp;#8617;      ",
            "content_html": "<p>In less than a week <a href=\"https://www.apple.com/apple-events/june-2017/\">Apple WWDC’s Keynote</a> will take place and they will unveil some new stuff to 5000 developers (myself included) plus a bunch of journalists.</p><p>WWDC – <em>World Wide Developer Conference</em>, as the name implies, is a conference for developers and in recent years Apple unveiled <em>only</em> software: namely new major <em>iOS</em>, <em>macOS</em>, <em>watchOS</em> and <em>tvOS</em> versions. The last hardware announced was the now infamous <a href=\"https://www.theverge.com/2017/4/4/15175994/apple-mac-pro-failure-admission\">trash can Mac Pro</a> in June 2013 that was eventually released in December of the same year. The previous year the (<em>at the time new</em>) <a href=\"https://www.engadget.com/2012/06/13/apple-macbook-pro-with-retina-display-review/\">MacBook Pro with Retina Display</a> was announced and released on the same day.</p><p>This year however there are much more rumors than usual on possible new or updated hardware releases.</p><p>I’ve created a simple poll to gather your opinions. You can find it embedded below or visiting <a href=\"https://s.plv.li/wTq1fz\">Pollover</a><sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.You can choose one ore more options and with a single tap cast your vote.</p><p>Let me know what do you think!</p><blockquote>  <p>You’ll be able to vote as soon as the Keynote starts on Monday June 5.</p></blockquote><div class=\"pollover-embed\" data-source=\"https://staging.pollover.co\" data-page=\"wTq1fz\"></div><script src=\"https://staging.pollover.co/embed.js\"></script><p>I’m hoping for a new iMac with renewed hardware and new design, but it seems that it will be out later this year.</p><div class=\"footnotes\">  <ol>    <li id=\"fn:1\">      <p>Pollover is a side project, not much more than an experiment at the moment to quickly create Polls and collect opinions. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>    </li>  </ol></div>",
            "url": "http://0.0.0.0:4000/wwdc/2017/05/30/wwdc-hardware-predictions.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/wwdc-hardware@2x.png",
            
            
            
            
            "tags": [
                
                  "wwdc",
                
                  "hardware",
                
                  "mac",
                
                  "ipad"
                
            ],
            
            "date_published": "2017-05-30T21:12:00+02:00",
            "date_modified": "2017-05-30T21:12:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/wwdc/2017/05/23/wwdc-plan.html",
            "title": "WWDC Plan",
            "summary": "",
            "content_text": "This will be my fifth WWDC as I had the opportunity to attend it since the 2012 edition (thanks Giovanni that gave me his ticket as he couldn’t attend). Then I won the lottery four times in a row from 2014 to 2017 🤷‍♂️.To be honest last year I transferred the ticket to my colleague @matax so he was able to attend his first WWDC, but I went to San Francisco anyway.Bragging aside, I have plenty of expectations for this year regarding things to do, people to meet and questions to ask.Take off is in less than two weeks 🎉ArrivalThis year WWDC moved back to San Jose after many years being held in San Francisco, it’s a new location for me and I’ve never been there, so I don’t know basically anything: that’s great!Apple announced WWDC in mid February (earlier than usual) so I took the opportunity to book flights and hotel immediately, hoping to win the lottery, but also knowing that there would have been other conferences to attend like AltConf, Layers and CocoaConf Next Door. I’m usually on budget and this was a pleasant surprise: everything did cost approximately 50% less than usual — 659€ for 6 nights (including taxes) and 596€ for the intercontinental flights. I’m going to flight Lufthansa, United and Canada Airlines, not the best options, but surely the cheapest I could find — hoping to avoid the infamous cabin drag. I wasn’t able to find an itinerary to land directly at San Jose airport as it would have been closer.The first night I’ll stay in a cheap hotel nearby the Airport in South San Francisco as I’m going to collapse immediately and sleep at least twelve hours.For the following nights I’ve chosen a motel really close to the McEnery Convention Center where WWDC and most of the third party events are being held. Reducing commuting time during the week is compulsory to to enjoy it at best.FlightsI’ll take off from Verona - VRN on Saturday 3 at 10 AM to land in San Francisco - SFO on the same day at 7:45 PM after a pause in Frankfurt am Main - FRA for approximately 6 hours. I hope to visit Frankfurt’s city center and grab some Brätwurst with Weißbier.I’m coming from Italy so I have a long flight ahead. Those are the things I’m bringing with me in cabin, if no new bans are enforced:  B&amp;amp;O H6 rev 2 - I don’t have noise canceling headphones as I don’t travel much, but those will do.  AirPods, but I’m really scared to lose them if I fell asleep.  Bundled Lightning to Headphone Jack adapter.  Power Brick.  iPhone 7.  USB-A to Lightning cable.  Lightning splitter to charge and listen at the same time.  MacBook if allowed.  USB-C to Lightning cable to connect to the mac.  A pen to compile the immigration form.  Passport.  Apple Watch.  N26 Black Credit Card.  A small Pillow.  A hoodie.  Comfortable shoes.The MasterplanFor me it’s people first, tech second. Every choice I make is based on who I can meet and what I can get from the available events. There’s only one week like this each year so you should consider every opportunity and be assured: you can sleep later on your way back home.This is my personal list of things I’d like to do.SundayI plan to move to San Jose early in the morning, check-in at the hotel, eventually go to the Apple Store to let them check an iPhone 5s with the battery that’s growing large and bending the screen, then pick up the WWDC badge.At 5 pm I’m going to watch App: The Human Story, a Documentary Screening Presented by AltConf &amp;amp; Layers. I already got the $25 ticket and you should too as 100% of the proceedings will go to App Camp for Girls. You can even watch the trailer online.Sunday night: go to bed at a decent time to reduce the jet lag and prepare for the Keynote queue.MondayEarly morning: Spend few hours queuing around the McEnery Convention Center, waiting for the WWDC Keynote to start, trying to get a decent place in the auditorium. In my useless experience, I  knew that even if you showed up at 6 AM you’ll easily enter in Presidio. New location and everything is unexpected. If I cannot sleep I may even show up really early. Breakfast is usually served inside the auditorium.Morning: enjoy the Keynote at 10 AM!Lunch time: find the room with ethernet cables and download the newly released stuff: Xcode, iOS and macOS betas, documentation, release notes and API differences. Bring your own ethernet dongle as there are chances that you won’t find the adapter suiting your computer port attached to the cables. Don’t even try to download stuff on WiFi as it’s usually unreliable.Early afternoon: watch the State of the Union. If rumors are true and this year we’ll get new hardware announced in the keynote during the morning, the State of the Union will be the real keynote for developers to highlight the news. Don’t miss it.Afternoon: listen to Accidental Tech Podcast live at @ AltConf at 5 pm.Evening: show up for the Relay FM WWDC meet-up @ the Museum of Quilts and Textiles at 7 pm.Night: I’m waiting for the Beard Bash tickets to go on sale, hopefully I’ll be able to get one. I’ve also requested an invite for the Firebase + Fabric party but I’m no one and probably my request won’t be even considered. Alternatively I may also collapse on the bed — let’s wait and see.Tuesday to FridaySessions and labs. After the keynote the full schedule will go online without placeholders concealing newly announced stuff. Take 10 minutes and plan your conference choosing which sessions to attend, which one to skip and stream later (it’s OK!), but most importantly when the labs you need to go will happen. I already have a small list of questions I’d like to ask to Apple engineers, but usually as soon as the new APIs are published that list grows exponentially. I usually choose to skip very crowded and mainstream sessions hold in the biggest rooms like What’s new in Swift, What’s new in Auto Layout and Getting Started with Swift as for example Swift is now open source so we already know what’s coming in Swift 4; more advanced sessions or less mainstream ones are more intresting to me as eventually you’ll get invaluable feedback directly after the presentation if you place your questions to the hosts.Lunch sessions - I usually keep an eye on those as they are inspiring and motivational: usually you’ll be able to be part of something really unique. Those are not streamed nor recorder, so it’s a lifetime opportunity. I still remember the ones with J. J. Abrams telling about Bad Robot, one with Star Wars authors and troopers, one where @plutokiller detailed his reasons to remove Pluto from the list of planets — way before the New Horizons probe took some amazing photos.I hope the catering will be different and lunch boxes will be edible for the first time.Get Togethers recently Apple started planning pop-up informal events during the conference to let you meet with like-minded developers and Apple experts for engaging and motivating conversations around specific topics. Keep an eye on them.TuesdayEvening: The Talk Show Live at 6 pm — tickets still need to go on sale and I’m hoping to get one (I’m relying on Overcast push notifications for new episodes and following @gruber on Twitter). Apple Executives were John Gruber’s special guests during the last two years: Phil Shiller and Craig Federighi. Also interesting (and I already have a ticket) is the Swift Panel with Chris Lattner, Jesse Squires, JP Simard, Kamilah Taylor and Kevin Ballard at 6 pm — location still unknown but will be in San Jose. I’m subscribed to the Swift Unwrapped podcast hosted by Squires and Simard to follow along swift evolution.WednesdayEvening: I got a ticket for the Better Elevation Extravaganza with news and music. There’s also another funding event for App Camp for Girls. I’ve attended it last year but I have to admit I’m not able to keep up with the songs played by James Dempsey and the Breakpoints (tech and developer friendly). Also the event has different ticket tiers with a VIP reserved area that you can join performing a substantial donation.ThursdayEvening: (usually) the WWDC beer bash hosted by Apple, with music, food and beer.FridayMost people leave early but sessions and labs usually go on until 5 pm. Be sure to don’t miss them as most advanced topics will be held during those final hours, like the legendary Crusty 2015 and 2016 sessions.BonusI would love to have a sneak peak at Apple Park but it seems difficult right now as most employees are still working at 1 Infinite Loop. Maybe Apple will organise something there, like the beer bash, but I’m not holding my breath.I’ve already been inside Apple’s current headquarters at 1 Infinite Loop two years ago thanks to @filippobiga. If you are interested and know someone that works there ask him/her if you could visit the mothership. Don’t expect much more than a meal at Cafe Mac and some good talks in the central park. Invaluable for a long time Mac lover.Company Store, in the convention center usually there’s a pop up company store where you can buy pricey Apple branded t-shirts, hats, hoodies, pens, bottles and not so much more. The same stuff is usually available at the company store at 1 Infinite Loop. Keep in mind that common sizes will be on fire on Tuesday and Wednesday. Don’t expect to find something different from XXXL hoodies later in the week.San Francisco. If you’ve never been there you can consider a visit taking the public transport Caltrain: it’s just an hour and fifteen minutes from San Jose.WWDC.family app is an easy way to connect with other developers during WWDC.Parties is a great app to keep up with the events organised by third parties during WWDC week.People I’d like to meet  Federico Viticci as fellow Italian fan of MacStories and Connected to say ciao again after a year.  Stephen Hackett and Mike Hurley of Relay FM as they fulfill most of my spare time with podcasts. It’s a tradition as I first met them when they were part of the 5by5 network.  Marco, John and Casey - a truly great trio that shares with me at least two hours every week!  John Gruber, I’d love to say hi.  Apple Execs – specially Craig Federighi – Hair Force One. You know… selfies.  Many developers I met in the last few years.  Apple employees as their work is totally fascinating to me.  You - I’m eager to know new people every year!StayingFew non obvious things I’m bringing with me: Imodium (after a memorable debacle two years ago), earplugs as you never know where and when you’ll end up sleeping, multiple USB charger with USB-A and C, USA to Italy plug converters, MacBook power brick with USB-C cable, Apple Watch cable, spare dollars for hotel tips.I won’t bring with me the electric shaver as my model doesn’t support 50Hz — 110V power supply and it will be so slow that will grab and pull the hairs instead of trimming them. I usually remember it too late and I’m forced to buy razors at the mall like an animal.LeavingI’m leaving on Saturday morning from San Francisco – SFO to enjoy a final evening with friends on Friday. The trip will be quite long as I’m heading to Toronto – YYZ, my first time in Canada, then again Frankfurt – FRA and finally back to Verona – VRN totalling 20 hours between first take off and final landing. An hour driving will bring be back home in Trento1 with my family 👨‍👩‍👦‍👦.I look forward to have an amazing week and meet you if you are there too.            As I’m currently abroad I’ve realised that I’ll travel in 6 different countries in 15 days like a pro: Italy, USA, Germany, Canada, Slovenia and Croatia. &amp;#8617;      ",
            "content_html": "<p>This will be my <em>fifth</em> WWDC as I had the opportunity to attend it since the 2012 edition (thanks <a href=\"https://twitter.com/giovatardu\">Giovanni</a> that gave me his ticket as he couldn’t attend). Then I won the lottery four times in a row from 2014 to 2017 🤷‍♂️.</p><p>To be honest last year I transferred the ticket to my colleague <a href=\"https://twitter.com/matax\">@matax</a> so he was able to attend his first WWDC, but I went to San Francisco anyway.</p><p><img src=\"http://0.0.0.0:4000/assets/images/wwdc.jpg#center100s\" alt=\"WWDC banner\" /></p><p>Bragging aside, I have plenty of expectations for this year regarding things to do, people to meet and questions to ask.</p><p>Take off is in less than two weeks 🎉</p><h4 id=\"arrival\">Arrival</h4><p>This year WWDC moved back to <strong>San Jose</strong> after many years being held in San Francisco, it’s a new location for me and I’ve never been there, so I don’t know basically anything: that’s great!</p><p>Apple announced WWDC in mid February (earlier than usual) so I took the opportunity to book flights and hotel immediately, hoping to win the lottery, but also knowing that there would have been other conferences to attend like <a href=\"http://altconf.com\">AltConf</a>, <a href=\"https://layers.is\">Layers</a> and <a href=\"http://cocoaconf.com/nextdoor/home\">CocoaConf Next Door</a>. I’m usually on budget and this was a pleasant surprise: everything did cost approximately 50% less than usual — 659€ for 6 nights (including taxes) and 596€ for the intercontinental flights. I’m going to flight Lufthansa, United and Canada Airlines, not the best options, but surely the cheapest I could find — hoping to avoid the infamous <a href=\"http://www.economist.com/news/business-and-finance/21720580-ugly-incident-provokes-social-media-storm-passenger-dragged-united-airlines\">cabin drag</a>. I wasn’t able to find an itinerary to land directly at <a href=\"https://www.google.com/maps/place/Airport+Terminal+A/@37.3684393,-121.929868,17z/data=!3m1!4b1!4m5!3m4!1s0x808fcbc0f91ebc87:0xbcea877b101855c0!8m2!3d37.3684393!4d-121.927674\">San Jose airport</a> as it would have been closer.</p><p>The first night I’ll stay in a cheap hotel nearby the Airport in South San Francisco as I’m going to collapse immediately and sleep at least twelve hours.</p><p>For the following nights I’ve chosen a motel really close to the <strong>McEnery Convention Center</strong> where WWDC and most of the third party events are being held. Reducing commuting time during the week is compulsory to to enjoy it at best.</p><h4 id=\"flights\">Flights</h4><p>I’ll take off from Verona - <em>VRN</em> on Saturday 3 at 10 AM to land in San Francisco - <em>SFO</em> on the same day at 7:45 PM after a pause in Frankfurt am Main - <em>FRA</em> for approximately 6 hours. I hope to visit Frankfurt’s city center and grab some Brätwurst with Weißbier.</p><div id=\"map\" class=\"dark\"></div><p><br /></p><p>I’m coming from Italy so I have a long flight ahead. Those are the things I’m bringing with me in cabin, if no new bans are enforced:</p><ul>  <li><a href=\"https://marco.org/2016/03/02/beoplay-h6-v2-review\">B&amp;O H6 rev 2</a> - I don’t have noise canceling headphones as I don’t travel much, but those will do.</li>  <li>AirPods, but I’m really scared to lose them if I fell asleep.</li>  <li>Bundled Lightning to Headphone Jack adapter.</li>  <li>Power Brick.</li>  <li>iPhone 7.</li>  <li>USB-A to Lightning cable.</li>  <li><a href=\"https://www.amazon.com/Belkin-Lightning-Charge-RockStar-iPhone/dp/B01LXFKSNA\">Lightning splitter</a> to charge and listen at the same time.</li>  <li>MacBook if allowed.</li>  <li>USB-C to Lightning cable to connect to the mac.</li>  <li>A pen to compile the immigration form.</li>  <li>Passport.</li>  <li>Apple Watch.</li>  <li><a href=\"https://n26.com/black/\">N26 Black Credit Card</a>.</li>  <li>A small Pillow.</li>  <li>A hoodie.</li>  <li>Comfortable shoes.</li></ul><h4 id=\"the-masterplan\">The Masterplan</h4><p>For me it’s <strong>people first</strong>, <strong>tech second</strong>. Every choice I make is based on who I can meet and what I can get from the available events. There’s only one week like this each year so you should consider every opportunity and be assured: you can sleep later on your way back home.</p><p>This is my personal list of things I’d like to do.</p><h6 id=\"sunday\">Sunday</h6><p>I plan to move to San Jose early in the morning, check-in at the hotel, eventually go to the <a href=\"https://www.apple.com/retail/valleyfair/?cid=aos-us-seo-maps\">Apple Store</a> to let them check an iPhone 5s with the battery that’s growing large and bending the screen, then pick up the WWDC badge.</p><p>At 5 pm I’m going to watch <a href=\"https://www.classy.org/san-jose/events/app-human-story-documentary-screening-presented-by-altconf-layers/e128096\">App: The Human Story</a>, a Documentary Screening Presented by AltConf &amp; Layers. I already got the $25 ticket and you should too as 100% of the proceedings will go to App Camp for Girls. You can even watch the <a href=\"http://appdocumentary.com\">trailer</a> online.</p><p>Sunday night: <strong>go to bed at a decent time</strong> to reduce the jet lag and prepare for the Keynote queue.</p><h6 id=\"monday\">Monday</h6><p>Early morning: Spend few hours <strong>queuing around the McEnery Convention Center</strong>, waiting for the <strong>WWDC Keynote</strong> to start, trying to get a decent place in the auditorium. In my useless experience, I  knew that even if you showed up at 6 AM you’ll easily enter in Presidio. New location and everything is unexpected. If I cannot sleep I may even show up really early. Breakfast is usually served inside the auditorium.</p><p>Morning: enjoy the Keynote at 10 AM!</p><p>Lunch time: find the room with ethernet cables and <strong>download</strong> the newly released stuff: Xcode, iOS and macOS betas, documentation, release notes and API differences. Bring your own ethernet dongle as there are chances that you won’t find the adapter suiting your computer port attached to the cables. Don’t even try to download stuff on WiFi as it’s usually unreliable.</p><p>Early afternoon: watch the <strong>State of the Union</strong>. If rumors are true and this year we’ll get new hardware announced in the keynote during the morning, the State of the Union will be the real keynote for developers to highlight the news. Don’t miss it.</p><p>Afternoon: listen to <a href=\"https://atp.fm\"><strong>Accidental Tech Podcast</strong></a> live at @ <a href=\"http://tickets.altconf.com\">AltConf</a> at 5 pm.</p><p>Evening: show up for the <a href=\"http://www.extras.relay.fm/blog/2017/3/save-the-date-relay-wwdc-2017\"><strong>Relay FM</strong> WWDC meet-up</a> @ the Museum of Quilts and Textiles at 7 pm.</p><p>Night: I’m waiting for the <a href=\"http://www.loopinsight.com/beard-bash-2017-at-wwdc/\">Beard Bash</a> tickets to go on sale, hopefully I’ll be able to get one. I’ve also requested an invite for the <a href=\"https://firebase.googleblog.com/2017/05/announcing-firebase-fabric-party-at.html\">Firebase + Fabric</a> party but I’m no one and probably my request won’t be even considered. Alternatively I may also collapse on the bed — let’s wait and see.</p><h6 id=\"tuesday-to-friday\">Tuesday to Friday</h6><p><strong>Sessions</strong> and <strong>labs</strong>. After the keynote the full schedule will go online without placeholders concealing newly announced stuff. Take 10 minutes and plan your conference choosing which sessions to attend, which one to skip and stream later (it’s OK!), but most importantly when the labs you need to go will happen. I already have a small list of questions I’d like to ask to Apple engineers, but usually as soon as the new APIs are published that list grows exponentially. I usually choose to skip very crowded and mainstream sessions hold in the biggest rooms like <a href=\"https://developer.apple.com/videos/play/wwdc2016/402/\">What’s new in Swift</a>, <a href=\"https://developer.apple.com/videos/play/wwdc2016/236/\">What’s new in Auto Layout</a> and <a href=\"https://developer.apple.com/videos/play/wwdc2016/404/\">Getting Started with Swift</a> as for example Swift is now open source so we already know what’s coming in Swift 4; more advanced sessions or less mainstream ones are more intresting to me as eventually you’ll get invaluable feedback directly after the presentation if you place your questions to the hosts.</p><p><strong>Lunch sessions</strong> - I usually keep an eye on those as they are inspiring and motivational: usually you’ll be able to be part of something really unique. Those are not streamed nor recorder, so it’s a lifetime opportunity. I still remember the ones with J. J. Abrams telling about <a href=\"https://twitter.com/bad_robot\">Bad Robot</a>, one with Star Wars authors and troopers, one where <a href=\"http://twitter.com/plutokiller\">@plutokiller</a> detailed his reasons to remove Pluto from the list of planets — way before the <a href=\"https://en.wikipedia.org/wiki/New_Horizons\">New Horizons</a> probe took some <a href=\"https://en.wikipedia.org/wiki/New_Horizons#/media/File:Pluto_by_LORRI_and_Ralph,_13_July_2015.jpg\">amazing photos</a>.</p><p><em>I hope the catering will be different and lunch boxes will be <a href=\"http://atp.fm/episodes/219\">edible</a> for the first time</em>.</p><p><strong>Get Togethers</strong> recently Apple started planning pop-up informal events during the conference to let you meet with like-minded developers and Apple experts for engaging and motivating conversations around specific topics. Keep an eye on them.</p><p><img src=\"http://0.0.0.0:4000/assets/images/star-wars.jpg#center100s\" alt=\"Star Wars\" /></p><h6 id=\"tuesday\">Tuesday</h6><p>Evening: <a href=\"https://daringfireball.net/thetalkshow/\"><strong>The Talk Show Live</strong></a> at 6 pm — tickets still need to go on sale and I’m hoping to get one (I’m relying on Overcast push notifications for new episodes and following <a href=\"https://twitter.com/gruber\">@gruber</a> on Twitter). Apple Executives were <a href=\"https://daringfireball.net\">John Gruber</a>’s special guests during the last two years: <a href=\"https://www.apple.com/pr/bios/philip-w-schiller.html\">Phil Shiller</a> and <a href=\"https://www.apple.com/pr/bios/craig-federighi.html\">Craig Federighi</a>. Also interesting (and I already have a ticket) is the <a href=\"https://www.eventbrite.com/e/wwdc-2017-swift-panel-tickets-34611623297\">Swift Panel</a> with <a href=\"https://twitter.com/clattner_llvm\">Chris Lattner</a>, <a href=\"https://twitter.com/jesse_squires\">Jesse Squires</a>, <a href=\"https://twitter.com/simjp\">JP Simard</a>, <a href=\"https://twitter.com/kamilah\">Kamilah Taylor</a> and <a href=\"https://twitter.com/eridius\">Kevin Ballard</a> at 6 pm — location still unknown but will be in San Jose. I’m subscribed to the <a href=\"https://spec.fm/podcasts/swift-unwrapped\">Swift Unwrapped</a> podcast hosted by Squires and Simard to follow along swift evolution.</p><h6 id=\"wednesday\">Wednesday</h6><p>Evening: I got a ticket for the <strong>Better Elevation Extravaganza</strong> with news and music. There’s also another <a href=\"https://www.classy.org/events/-/e126329\">funding event</a> for <strong>App Camp for Girls</strong>. I’ve attended it last year but I have to admit I’m not able to keep up with the songs played by <strong>James Dempsey and the Breakpoints</strong> (tech and developer friendly). Also the event has different ticket tiers with a VIP reserved area that you can join performing a substantial donation.</p><h6 id=\"thursday\">Thursday</h6><p>Evening: (usually) the <strong>WWDC beer bash</strong> hosted by Apple, with music, food and beer.</p><h6 id=\"friday\">Friday</h6><p>Most people leave early but sessions and labs usually go on until 5 pm. Be sure to don’t miss them as most advanced topics will be held during those final hours, like the legendary <strong>Crusty</strong> <a href=\"https://developer.apple.com/videos/play/wwdc2015/408/\">2015</a> and <a href=\"https://developer.apple.com/videos/play/wwdc2016/419/\">2016</a> sessions.</p><h5 id=\"bonus\">Bonus</h5><p>I would love to have a sneak peak at <strong>Apple Park</strong> but it seems difficult right now as most employees are still working at 1 Infinite Loop. Maybe Apple will organise something there, like the beer bash, but I’m not holding my breath.</p><p>I’ve already been inside Apple’s current headquarters at <a href=\"https://www.google.com/maps/place/Infinite+Loop,+Cupertino,+CA+95014,+USA/@37.3322109,-122.0329718,17z/data=!3m1!4b1!4m5!3m4!1s0x808fb5b6e7b4b9fb:0x697a4332574f50d9!8m2!3d37.3322109!4d-122.0307778\">1 Infinite Loop</a> two years ago thanks to <a href=\"https://twitter.com/filippobiga\">@filippobiga</a>. If you are interested and know someone that works there ask him/her if you could visit the mothership. Don’t expect much more than a meal at Cafe Mac and some good talks in the central park. Invaluable for a long time Mac lover.</p><p><a href=\"https://www.apple.com/companystore/index.html\">Company Store</a>, in the convention center usually there’s a pop up company store where you can buy pricey Apple branded t-shirts, hats, hoodies, pens, bottles and not so much more. The same stuff is usually available at the company store at 1 Infinite Loop. Keep in mind that common sizes will be on fire on Tuesday and Wednesday. Don’t expect to find something different from XXXL hoodies later in the week.</p><p>San Francisco. If you’ve never been there you can consider a visit taking the public transport Caltrain: it’s just an hour and fifteen minutes from San Jose.</p><p><a href=\"https://wwdc.family\">WWDC.family</a> app is an easy way to connect with other developers during WWDC.</p><p><a href=\"https://itunes.apple.com/us/app/parties-for-wwdc/id879924066?mt=8\">Parties</a> is a great app to keep up with the events organised by third parties during WWDC week.</p><h4 id=\"people-id-like-to-meet\">People I’d like to meet</h4><ul>  <li><a href=\"https://twitter.com/viticci\">Federico Viticci</a> as fellow Italian fan of <a href=\"https://www.macstories.net\">MacStories</a> and <a href=\"https://www.relay.fm/connected\">Connected</a> to say <em>ciao</em> again after a year.</li>  <li><a href=\"https://twitter.com/ismh\">Stephen Hackett</a> and <a href=\"https://twitter.com/imyke\">Mike Hurley</a> of <a href=\"https://relay.fm\">Relay FM</a> as they fulfill most of my spare time with podcasts. It’s a tradition as I first met them when they were part of the <a href=\"http://5by5.tv\">5by5</a> network.</li></ul><p><img src=\"http://0.0.0.0:4000/assets/images/connected.jpg#center100s\" alt=\"Connected Guys\" /></p><ul>  <li><a href=\"http://marco.org\">Marco</a>, <a href=\"https://twitter.com/siracusa\">John</a> and <a href=\"https://www.caseyliss.com\">Casey</a> - a truly great trio that shares with me at least <a href=\"https://atp.fm\">two hours</a> every week!</li>  <li><a href=\"https://daringfireball.net\">John Gruber</a>, I’d love to say hi.</li>  <li>Apple Execs – specially <a href=\"https://www.apple.com/pr/bios/craig-federighi.html\">Craig Federighi</a> – Hair Force One. You know… <em>selfies</em>.</li>  <li>Many developers I met in the last few years.</li>  <li>Apple employees as their work is totally fascinating to me.</li>  <li><strong>You</strong> - I’m eager to know new people every year!</li></ul><h4 id=\"staying\">Staying</h4><p>Few non obvious things I’m bringing with me: Imodium (after a memorable debacle two years ago), earplugs as you never know where and when you’ll end up sleeping, <a href=\"https://www.amazon.com/Anker-Premium-Charger-PowerPort-Delivery/dp/B01D8C6ULO/ref=sr_1_6?ie=UTF8&amp;qid=1495529827&amp;sr=8-6&amp;keywords=anker+usb-c\">multiple USB charger</a> with USB-A and C, USA to Italy plug converters, MacBook power brick with USB-C cable, Apple Watch cable, spare dollars for hotel tips.</p><p>I <em>won’t</em> bring with me the electric shaver as my model doesn’t support 50Hz — 110V power supply and it will be so slow that will grab and pull the hairs instead of trimming them. I usually remember it too late and I’m forced to buy razors at the mall like an animal.</p><h4 id=\"leaving\">Leaving</h4><p>I’m leaving on Saturday morning from San Francisco – <em>SFO</em> to enjoy a final evening with friends on Friday. The trip will be quite long as I’m heading to Toronto – <em>YYZ</em>, my first time in Canada, then again Frankfurt – <em>FRA</em> and finally back to Verona – <em>VRN</em> totalling 20 hours between first take off and final landing. An hour driving will bring be back home in Trento<sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> with my family 👨‍👩‍👦‍👦.</p><p>I look forward to have an amazing week and meet you if you are there too.</p><script src=\"https://api.mapbox.com/mapbox.js/v3.1.0/mapbox.js\"></script><link href=\"https://api.mapbox.com/mapbox.js/v3.1.0/mapbox.css\" rel=\"stylesheet\" /><style>    .path-start {      -webkit-transition:stroke-dashoffset 2.5s ease-in;         -moz-transition:stroke-dashoffset 2.5s ease-in;           -o-transition:stroke-dashoffset 2.5s ease-in;              transition:stroke-dashoffset 2.5s ease-in;      }    #map { position:relative; height:300px; width: 100%; }</style><script src=\"https://api.mapbox.com/mapbox.js/plugins/arc.js/v0.1.0/arc.js\"></script><script src=\"http://0.0.0.0:4000/assets/data/wwdc-2017-airports.js\"></script><script src=\"http://0.0.0.0:4000/assets/data/wwdc-2017-flights.js\"></script><script src=\"http://0.0.0.0:4000/assets/data/wwdc-2017-map.js\"></script><div class=\"footnotes\">  <ol>    <li id=\"fn:1\">      <p>As I’m currently abroad I’ve realised that I’ll travel in 6 different countries in 15 days like a pro: Italy, USA, Germany, Canada, Slovenia and Croatia. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>    </li>  </ol></div>",
            "url": "http://0.0.0.0:4000/wwdc/2017/05/23/wwdc-plan.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/wwdc@2x.png",
            
            
            
            
            "tags": [
                
                  "wwdc",
                
                  "goals"
                
            ],
            
            "date_published": "2017-05-23T13:48:00+02:00",
            "date_modified": "2017-05-23T13:48:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/data/2017/05/13/quantified-self.html",
            "title": "Quantified Self",
            "summary": "",
            "content_text": "The quantified self concept and movement represent an area of great interest to improve the knowledge of yourself and a great stimulus to become a better person.At the moment I’m leveraging existing tools to measure few areas:  Body weight with an old style scale each morning.  Workouts: running and biking with Strava1.  Hearth rate1 with HearthWatch.  Steps with Pedometer++.  Hours spent standing1.  Active energy burned1.  Minutes of daily activity1.  Sleep with AutoSleep.  Diet (occasionally) with MyFitnessPal.  Routes with Moves.  Time spent on projects with Toggl.In order to see in a single place the collected data I’m leveraging Gyroscope. It looks great and gives some insights, what it lacks though is a way to compare different periods.RescueTime gives you some insights on productivity during working hours, tracking automatically the app you are using (works on macOS, doesn’t on iOS), the name of the open document and website addresses on browsers. Unfortunately I wanted to have a more precise proxy of my productivity, measured for example in lines of code written and deleted, hours spent in conference calls, number of emails sent and so on.I wasn’t able to find something alredy existing and I’m also scared to give all this informations to a third party, so this is what I tried:  Deployed a small VPS with the ELK stack (ElasticSearch, Logstash, Kibana) able to ingest, store and display charts of specially time series.  Created a simple iOS app, with a list of buttons to increase different counters on ElasticSearch.  Developed scripts to collect informations from different remote services sending them to Logstash.  Setup webhooks, i.e. on GitHub, pointing to Logstash to collect actions from different services.  Written Logstash scripts able to read exports of my bank transactions and store them in ElasticSearch.  Created different dashboards in Kibana to visualise and compose all the informations coming from different sources.Unfortunately I wasn’t able to render the picture I desired: a single indicator (sum of many smaller ones) to tell me how much productive I’ve been in a particular day, that can be plotted in a single comprehensive chart.Those are some of issues I faced:  Kibana is a great tool specifically designed for time series. When the information is not clearly representative of just a single moment in time, it becomes useless. It has some charts to choose from, but are not very broad nor easily customizable.  Automatic tracking for some stuff is impossible due to the absence of open APIs.  Manual tracking is tedious, prone to errors and suffers deeply of rapid fatigue.At the moment I’m stuck, I don’t have this proxy and I’m really bored to track things manually so I stopped doing it.Do you have any suggestion? Ping me on Twitter @macteo.            I own an Apple Watch series 2 that includes a hearth rate sensor, accelerometer, gyroscope and the GPS. &amp;#8617; &amp;#8617;2 &amp;#8617;3 &amp;#8617;4 &amp;#8617;5      ",
            "content_html": "<p>The <a href=\"https://en.wikipedia.org/wiki/Quantified_Self\">quantified self</a> concept and movement represent an area of great interest to improve the knowledge of yourself and a great stimulus to become a better person.</p><p>At the moment I’m leveraging existing tools to measure few areas:</p><ul>  <li>Body weight with an old style scale each morning.</li>  <li>Workouts: running and biking with <a href=\"https://www.strava.com/athletes/12812427\">Strava</a><sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.</li>  <li>Hearth rate<sup id=\"fnref:1:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> with <a href=\"http://heartwatch.tantsissa.com\">HearthWatch</a>.</li>  <li>Steps with <a href=\"http://pedometerplusplus.com\">Pedometer++</a>.</li>  <li>Hours spent standing<sup id=\"fnref:1:2\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.</li>  <li>Active energy burned<sup id=\"fnref:1:3\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.</li>  <li>Minutes of daily activity<sup id=\"fnref:1:4\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup>.</li>  <li>Sleep with <a href=\"https://itunes.apple.com/us/app/autosleep-auto-sleep-tracker-for-watch/id1164801111?mt=8\">AutoSleep</a>.</li>  <li>Diet (occasionally) with <a href=\"https://www.myfitnesspal.com\">MyFitnessPal</a>.</li>  <li>Routes with <a href=\"https://www.moves-app.com\">Moves</a>.</li>  <li>Time spent on projects with <a href=\"https://toggl.com\">Toggl</a>.</li></ul><p>In order to see in a single place the collected data I’m leveraging <a href=\"https://gyrosco.pe/\">Gyroscope</a>. It looks great and gives some insights, what it lacks though is a way to compare different periods.</p><p><a href=\"https://www.rescuetime.com\">RescueTime</a> gives you some insights on productivity during working hours, tracking automatically the app you are using (works on macOS, doesn’t on iOS), the name of the open document and website addresses on browsers. Unfortunately I wanted to have a more precise proxy of my productivity, measured for example in lines of code written and deleted, hours spent in conference calls, number of emails sent and so on.</p><p>I wasn’t able to find something alredy existing and I’m also scared to give all this informations to a third party, so this is what I tried:</p><ul>  <li>Deployed a small VPS with the <a href=\"https://www.elastic.co/products\">ELK stack</a> (ElasticSearch, Logstash, Kibana) able to ingest, store and display charts of specially time series.</li>  <li>Created a simple iOS app, with a list of buttons to increase different counters on ElasticSearch.</li>  <li>Developed scripts to collect informations from different remote services sending them to Logstash.</li>  <li>Setup webhooks, i.e. on GitHub, pointing to Logstash to collect actions from different services.</li>  <li>Written Logstash scripts able to read exports of my bank transactions and store them in ElasticSearch.</li>  <li>Created different dashboards in Kibana to visualise and compose all the informations coming from different sources.</li></ul><p>Unfortunately I wasn’t able to render the picture I desired: a single indicator (sum of many smaller ones) to tell me how much productive I’ve been in a particular day, that can be plotted in a single comprehensive chart.</p><p>Those are some of issues I faced:</p><ul>  <li>Kibana is a great tool specifically designed for time series. When the information is not clearly representative of just a single moment in time, it becomes useless. It has some charts to choose from, but are not very broad nor easily customizable.</li>  <li>Automatic tracking for some stuff is impossible due to the absence of open APIs.</li>  <li>Manual tracking is tedious, prone to errors and suffers deeply of rapid fatigue.</li></ul><p>At the moment I’m stuck, I don’t have this proxy and I’m really bored to track things manually so I stopped doing it.</p><p>Do you have any suggestion? Ping me on Twitter <a href=\"https://twitter.com/macteo\">@macteo</a>.</p><div class=\"footnotes\">  <ol>    <li id=\"fn:1\">      <p>I own an <a href=\"https://www.apple.com/apple-watch-series-2/\">Apple Watch</a> series 2 that includes a hearth rate sensor, accelerometer, gyroscope and the GPS. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a> <a href=\"#fnref:1:1\" class=\"reversefootnote\">&#8617;<sup>2</sup></a> <a href=\"#fnref:1:2\" class=\"reversefootnote\">&#8617;<sup>3</sup></a> <a href=\"#fnref:1:3\" class=\"reversefootnote\">&#8617;<sup>4</sup></a> <a href=\"#fnref:1:4\" class=\"reversefootnote\">&#8617;<sup>5</sup></a></p>    </li>  </ol></div>",
            "url": "http://0.0.0.0:4000/data/2017/05/13/quantified-self.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/gyroscope-sum@2x.png",
            
            
            
            
            "tags": [
                
                  "quantified",
                
                  "self"
                
            ],
            
            "date_published": "2017-05-13T07:00:00+02:00",
            "date_modified": "2017-05-13T07:00:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/playground/2016/12/04/bezier-curves.html",
            "title": "Bézier Curves",
            "summary": "",
            "content_text": "Few weeks ago I had the pleasure to prepare and host a lesson on Bézier Curves during the Analisi matematica con elementi di algebra course, part of the bachelor degree Interfacce e Tecnologie della Comunicazione taking place in Rovereto.I’m listing here some existing material that inspired me, and a Swift Playground I’ve prepared for the lesson.Inspiring sources      Bézier Curves - Under the Hood video and related article by Peter Nowell.        Making things with maths by Steven Wittens.  Thanks!Swift PlaygroundTwo different versions of the same playground are available, one compatible with the Swift Playground app for iPad, the other with Xcode on macOS.      Download the macOSversion.        Download the iPad version.    Disclaimer: the hidden code is really rough, I plan to refactor it, but time is definitely a limiting factor.",
            "content_html": "<p>Few weeks ago I had the pleasure to prepare and host a lesson on Bézier Curves during the <em>Analisi matematica con elementi di algebra</em> course, part of the bachelor degree <a href=\"http://offertaformativa.unitn.it/it/l/interfacce-e-tecnologie-della-comunicazione\">Interfacce e Tecnologie della Comunicazione</a> taking place in <a href=\"https://it.wikipedia.org/wiki/Rovereto\">Rovereto</a>.</p><p>I’m listing here some existing material that inspired me, and a Swift Playground I’ve prepared for the lesson.</p><h5 id=\"inspiring-sources\">Inspiring sources</h5><ul>  <li>    <p><a href=\"https://vimeo.com/106757336\">Bézier Curves - Under the Hood</a> video and related <a href=\"https://medium.com/sketch-app/mastering-the-bezier-curve-in-sketch-4da8fdf0dbbb#.rhuvgwcq0\">article</a> by <a href=\"https://twitter.com/pnowelldesign\">Peter Nowell</a>.</p>  </li>  <li>    <p><a href=\"https://www.youtube.com/watch?v=Zkx1aKv2z8o\">Making things with maths</a> by <a href=\"https://acko.net/about/\">Steven Wittens</a>.</p>  </li></ul><p>Thanks!</p><h5 id=\"swift-playground\">Swift Playground</h5><p>Two different versions of the same playground are available, one compatible with the <a href=\"http://www.apple.com/swift/playgrounds/\">Swift Playground</a> app for iPad, the other with <a href=\"https://developer.apple.com/xcode/\">Xcode</a> on macOS.</p><ul>  <li>    <p><a href=\"https://github.com/macteo/bezier/raw/develop/Bézier.playground.zip\">Download the macOSversion</a>.</p>  </li>  <li>    <p><a href=\"https://github.com/macteo/bezier/raw/develop/Bézier.playgroundbook.zip\">Download the iPad version</a>.</p>  </li></ul><blockquote>  <p>Disclaimer: the hidden code is really rough, I plan to refactor it, but time is definitely a limiting factor.</p></blockquote>",
            "url": "http://0.0.0.0:4000/playground/2016/12/04/bezier-curves.html",
            
            "image": "http://0.0.0.0:4000/assets/images/bezier.png",
            
            
            
            
            "tags": [
                
                  "bezier",
                
                  "curves"
                
            ],
            
            "date_published": "2016-12-04T08:27:00+01:00",
            "date_modified": "2016-12-04T08:27:00+01:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/apple/2016/10/26/magic-keyboard-2-with-Touch-ID.html",
            "title": "Magic Keyboard 2",
            "summary": "",
            "content_text": "Apple all but confirmed that the next MacBook Pro models will be unveiled tomorrow and will include support for Touch ID and a custom bar is going to replace the current top row of keys in the embedded keyboard.The above image is already on your Mac if you installed the latest macOS Sierra 10.12.1 update. Check for yourself looking at/System/Library/PrivateFrameworks/PassKitUI.framework/Versions/A/Resources/ApplePaySplashSA.tiffBesides the lack of a visible physical power button and of the Esc key, Steve Troughton Smith suggested that developers, in order to populate the Magic Bar with custom controls, will need to create extensions much like the ones used in watchOS 1.This opinion is corroborated by the fact that since august a new target named os_bridge is available as part of the Xcode toolchain.In order to support Touch ID - that requires the presence of a Secure Enclave available only as part of the custom A series custom arm SoC used on mobile devices - on Macs that are running on x86-64 Intel processors, Apple is going to embed another custom arm SoC inside the Macs. Probably a new letter will be used to describe those chips like the S serie created for the ᴡᴀᴛᴄʜ or the W serie for headphones. I’m going to bet my $1 to E1  - Embedded 1.Magic Keyboard 2All those speculations come nicely together also if Apple is going to upgrade the Magic Keyboard replacing the top row with a customizable display like the one rendered below. This device will enable Touch ID support also on iMac, Mac Pro, Mac mini and Apple TV devices..All the same principles will apply nicely:  Custom E1 SoC.  Touch ID with secure enclave.  Extensions are preloaded as happens on watchOS (without too much RAM and battery constraints).  All the logic will run on the extension directly on the keyboard itself and only equivalent keystrokes will be sent back to the Mac to keep low latency.  The base interface will be preloaded in RAM on the keyboard to speed up the launch.  Authentication and Security will be managed directly on the Magic Keyboard, but passwords will stay encrypted on the paired Mac keychain.  It will also work as external keyboard for iPhone, iPad, Apple TV devices.  Works with Bluetooth and (already) has a Lightning port to charge and eventually communicate.  Requires macOS Sierra 10.12.1, iOS 10.1 or tvOS 10.0.1.Now the really bold prediction: the price will stay the same as the original Magic Keyboard: $99. Apple has already increased the price by $30 last year.",
            "content_html": "<p>Apple all but confirmed that the next MacBook Pro models will be unveiled tomorrow and will include support for Touch ID and a custom bar is going to replace the current top row of keys in the embedded keyboard.</p><p><img src=\"http://0.0.0.0:4000/assets/images/magic-keyboard/ApplePaySplashSA.png#center100s\" alt=\"Pay MacBook Pro\" /></p><p>The above image is already on your Mac if you installed the latest macOS Sierra 10.12.1 update. Check for yourself looking at</p><div class=\"highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>/System/Library/PrivateFrameworks/PassKitUI.framework/Versions/A/Resources/ApplePaySplashSA.tiff</code></pre></div></div><p>Besides the lack of a visible physical power button and of the <code class=\"highlighter-rouge\">Esc</code> key, <a href=\"http://twitter.com/stroughtonsmith/status/790977924132433920\">Steve Troughton Smith suggested</a> that developers, in order to populate the <em>Magic Bar</em> with custom controls, will need to create extensions much like the ones used in watchOS 1.</p><p>This opinion is corroborated by the fact that since august a new target named <code class=\"highlighter-rouge\">os_bridge</code> is available as part of the Xcode toolchain.</p><p><img src=\"http://0.0.0.0:4000/assets/images/magic-keyboard/os_bridge.png#center100s\" alt=\"target_os_bridge\" /></p><p>In order to support Touch ID - that requires the presence of a Secure Enclave available only as part of the custom <em>A</em> series custom <em>arm</em> SoC used on mobile devices - on Macs that are running on <em>x86-64</em> Intel processors, Apple is going to embed another custom arm SoC inside the Macs. Probably a new letter will be used to describe those chips like the <a href=\"http://www.apple.com/apple-watch-series-2/\"><em>S</em></a> serie created for the ᴡᴀᴛᴄʜ or the <a href=\"http://www.apple.com/airpods/\"><em>W</em></a> serie for headphones. I’m going to bet my $1 to <em>E1</em>  - Embedded 1.</p><h5 id=\"magic-keyboard-2\">Magic Keyboard 2</h5><p>All those speculations come nicely together also if Apple is going to upgrade the Magic Keyboard replacing the top row with a customizable display like the one rendered below. This device will enable Touch ID support also on iMac, Mac Pro, Mac mini and Apple TV devices..</p><p><img src=\"http://0.0.0.0:4000/assets/images/magic-keyboard/magic-keyboard-2.png#center100s\" alt=\"Pay MacBook Pro\" /></p><p>All the same principles will apply nicely:</p><ul>  <li>Custom E1 SoC.</li>  <li>Touch ID with secure enclave.</li>  <li>Extensions are preloaded as happens on watchOS (without too much RAM and battery constraints).</li>  <li>All the logic will run on the extension directly on the keyboard itself and only equivalent <em>keystrokes</em> will be sent back to the Mac to keep low latency.</li>  <li>The base interface will be preloaded in RAM on the keyboard to speed up the launch.</li>  <li>Authentication and Security will be managed directly on the Magic Keyboard, but passwords will stay encrypted on the paired Mac keychain.</li>  <li>It will also work as external keyboard for iPhone, iPad, Apple TV devices.</li>  <li>Works with Bluetooth and (already) has a Lightning port to charge and eventually communicate.</li>  <li>Requires macOS Sierra 10.12.1, iOS 10.1 or tvOS 10.0.1.</li></ul><p>Now the really bold prediction: the price will stay the same as the original Magic Keyboard: $99. Apple has already increased the price by $30 last year.</p>",
            "url": "http://0.0.0.0:4000/apple/2016/10/26/magic-keyboard-2-with-Touch-ID.html",
            
            "image": "http://0.0.0.0:4000/assets/images/magic-keyboard/magic-keyboard-2-small.png",
            
            
            
            
            "tags": [
                
                  "apple",
                
                  "magic",
                
                  "keyboard",
                
                  "TouchID"
                
            ],
            
            "date_published": "2016-10-26T11:57:00+02:00",
            "date_modified": "2016-10-26T11:57:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/xcode/2016/10/18/dynamic-framework-with-cocoapods-support.html",
            "title": "Dynamic Framework with CocoaPods support",
            "summary": "",
            "content_text": "A short and compact guide to create a basic redistributable framework with CocoaPods support. This example is intended to work on iOS, but the same principles can be applied to watchOS, tvOS and macOS.Create a new Xcode project and select Cocoa Touch Framework.For redistributable libraries Objective-C is still the language-to-go. But you can also choose to write them in Swift if the host apps are willing to include the swift runtime.Set the right version, 0.1.0 is a good start point.Check the Allow app extension API only if you plan to use your framework from inside app extensions.Create at least a new class.Populate the header file.Implement the methods.Import your header files in the Umbrella Awesome.h header file so they will be accessible.Open Terminal and move into the project folder, for examplecd ~/Documents/Projects/AwesomeInstall CocoaPods gem if you don’t have it already.[sudo] gem install cocoapodspod spec create AwesomeEdit Awesome.podspecAdd a license fileCreate a remote repository and add it the local copygit remote add origin git@github.com/macteo/Awesome.gitCommit and pushgit push origin mastergit tag v0.1.0git push --tagspod spec lint Awesome.podspecCreate a sample project inside the main folder.cd AwesomeExamplepod initEdit podfile to include the previously defined podspec. We use relative path for the example project.pod &#39;Awesome&#39;, :path =&amp;gt; &#39;../&#39;pod installBuild so the dependencies are preparedimport AwesomeAwesomeLogger().log(&quot;Hello World&quot;)Edit Awesome.podspec and bump version number.Add sample project files, commit, push and tag.git add .git commit -m &quot;Added sample project&quot;git push origin mastergit tag v0.1.1git push --tags",
            "content_html": "<p>A short and compact guide to create a basic redistributable framework with CocoaPods support. This example is intended to work on iOS, but the same principles can be applied to watchOS, tvOS and macOS.</p><p>Create a new Xcode project and select <strong>Cocoa Touch Framework</strong>.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/001 - create_xcode_framework_project_0.jpg#center1000\" alt=\"Framework\" /></p><p>For redistributable libraries Objective-C is still the language-to-go. But you can also choose to write them in Swift if the host apps are willing to include the swift runtime.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/002 - create_xcode_framework_project_1.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/003 - create_xcode_framework_project_2.jpg#center1000\" alt=\"Framework\" /></p><p>Set the right version, 0.1.0 is a good start point.Check the <strong>Allow app extension API only</strong> if you plan to use your framework from inside app extensions.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/004 - xcode_version_and_extension.jpg#center1000\" alt=\"Framework\" /></p><p>Create at least a new class.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/005 - create_classes.jpg#center1000\" alt=\"Framework\" /></p><p>Populate the header file.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/006 - write_headers.jpg#center1000\" alt=\"Framework\" /></p><p>Implement the methods.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/007 - implement_classes.jpg#center1000\" alt=\"Framework\" /></p><p>Import your header files in the <em>Umbrella</em> <code class=\"highlighter-rouge\">Awesome.h</code> header file so they will be accessible.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/008 - populate_umbrella_header.jpg#center1000\" alt=\"Framework\" /></p><p>Open <strong>Terminal</strong> and move into the project folder, for example</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd</span> ~/Documents/Projects/Awesome</code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/009 - terminal_move_to_folder.jpg#center1000\" alt=\"Framework\" /></p><p>Install <a href=\"http://cocoapods.org\">CocoaPods</a> gem if you don’t have it already.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">[</span><span class=\"nb\">sudo</span><span class=\"o\">]</span> gem <span class=\"nb\">install </span>cocoapods</code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/010 - install_cocoapods.jpg#center1000\" alt=\"Framework\" /></p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pod spec create Awesome</code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/011 - create_podspec.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/012 - finder_structure.jpg#center1000\" alt=\"Framework\" /></p><p>Edit <code class=\"highlighter-rouge\">Awesome.podspec</code></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/013 - edit_podspec.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/014 - final_podspec.jpg#center1000\" alt=\"Framework\" /></p><p>Add a license file</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/015 - add_license_file.jpg#center1000\" alt=\"Framework\" /></p><p>Create a remote repository and add it the local copy</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git remote add origin git@github.com/macteo/Awesome.git</code></pre></div></div><p>Commit and push</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git push origin master</code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/016 - commit_and_push.jpg#center1000\" alt=\"Framework\" /></p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git tag v0.1.0git push <span class=\"nt\">--tags</span></code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/017 - add_tag.jpg#center1000\" alt=\"Framework\" /></p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pod spec lint Awesome.podspec</code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/018 - lint.jpg#center1000\" alt=\"Framework\" /></p><p>Create a sample project inside the main folder.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/019 - create_sample_project_0.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/020 - create_sample_project_1.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/021 - create_sample_project_2.jpg#center1000\" alt=\"Framework\" /></p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">cd </span>AwesomeExamplepod init</code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/022 - move_to_sample_project_and_init_pods.jpg#center1000\" alt=\"Framework\" /></p><p>Edit podfile to include the previously defined podspec. We use relative path for the example project.</p><div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">pod</span> <span class=\"s1\">'Awesome'</span><span class=\"p\">,</span> <span class=\"ss\">:path</span> <span class=\"o\">=&gt;</span> <span class=\"s1\">'../'</span></code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/023 - edit_podfile.jpg#center1000\" alt=\"Framework\" /></p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pod <span class=\"nb\">install</span></code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/024 - pod_install.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/025 - final_project_structure.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/026 - open_sample_project.jpg#center1000\" alt=\"Framework\" /></p><p>Build so the dependencies are prepared</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">import</span> <span class=\"kt\">Awesome</span></code></pre></div></div><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">AwesomeLogger</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s\">\"Hello World\"</span><span class=\"p\">)</span></code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/027 - final_result.jpg#center1000\" alt=\"Framework\" /></p><p>Edit <strong>Awesome.podspec</strong> and bump version number.</p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/028 - bump_version.jpg#center1000\" alt=\"Framework\" /></p><p>Add sample project files, commit, push and tag.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>git add <span class=\"nb\">.</span>git commit <span class=\"nt\">-m</span> <span class=\"s2\">\"Added sample project\"</span>git push origin mastergit tag v0.1.1git push <span class=\"nt\">--tags</span></code></pre></div></div><p><img src=\"http://0.0.0.0:4000/assets/images/framework/029 - add_sample_project.jpg#center1000\" alt=\"Framework\" /></p><p><img src=\"http://0.0.0.0:4000/assets/images/framework/030 - create_new_tag_and_push.jpg#center1000\" alt=\"Framework\" /></p>",
            "url": "http://0.0.0.0:4000/xcode/2016/10/18/dynamic-framework-with-cocoapods-support.html",
            
            "image": "http://0.0.0.0:4000/assets/images/framework.png",
            
            
            
            
            "date_published": "2016-10-18T11:04:00+02:00",
            "date_modified": "2016-10-18T11:04:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/ios/2016/08/10/blurred-rounded-uiview.html",
            "title": "Blurred Rounded UIView",
            "summary": "",
            "content_text": "Maps and Apple Music apps in iOS 10 include a brand new way to present modal contents: a floating semi-modal view. Widgets and notifications have been redesigned to be presented with a similar shape.  Due to beta developer agreement I cannot share screenshots of those features. However you can have a look at them visiting the dedicated iOS 10 preview page on Apple’s website.Unfortunately the technique used in iOS 8 and 9 to round the corner won’t work anymore: you’ll end up with rounded corners and a transparent background instead.There’s an entire thread on Apple’s Developer Forums with motivations behind this change (you need to register as developer to read it).However the trick is to avoid using layer.mask on the view that contains the UIVisualEffectView as subview or on the UIVisualEffectView itself as we used to do. Instead you are supposed to use layer.maskView or, if you just need rounded corners, the layer.cornerRadius property associated with layer.masksToBounds = true.I’ve also found that if you try to add an external shadow to the container view’s layer, you’ll end up without blur. The trick is to set the shadow inside func layoutSubiviews() override method.class BlurredRoundedView: UIView {    let effectBackground = UIVisualEffectView(effect: extraLightBlur)        required init?(coder aDecoder: NSCoder) {        super.init(coder: aDecoder)        commonInit()    }        override init(frame: CGRect) {        super.init(frame: frame)        commonInit()    }        func commonInit()  {        initLayer()        initEffectView()    }        func initLayer() {        backgroundColor = UIColor.clearColor()        layer.cornerRadius = cornerRadius        layer.masksToBounds = false    }        func initEffectView() {        effectBackground.frame = bounds        effectBackground.layer.cornerRadius = cornerRadius        effectBackground.layer.masksToBounds = true        addSubview(effectBackground)        sendSubviewToBack(effectBackground)    }        override func layoutSubviews() {        super.layoutSubviews()        let shadowPath = UIBezierPath(roundedRect: bounds, cornerRadius: cornerRadius)        layer.masksToBounds = false        layer.shadowColor = UIColor.lightGrayColor().CGColor        layer.shadowOffset = CGSizeMake(0.0, 0.0)        layer.shadowOpacity = 0.4        layer.shadowRadius = 4        layer.shadowPath = shadowPath.CGPath    }}I’ve prepared an Xcode playground to show the final result.Once you know how to achieve the desired result, it’s really simple. Enjoy.",
            "content_html": "<p>Maps and Apple Music apps in iOS 10 include a brand new way to present modal contents: a floating semi-modal view. Widgets and notifications have been redesigned to be presented with a similar shape.</p><blockquote>  <p>Due to beta developer agreement I cannot share screenshots of those features. However you can have a look at them visiting the dedicated <a href=\"http://www.apple.com/ios/ios10-preview/\">iOS 10 preview page</a> on Apple’s website.</p></blockquote><p>Unfortunately the technique used in iOS 8 and 9 to round the corner won’t work anymore: you’ll end up with rounded corners and a transparent background instead.</p><p>There’s an <a href=\"https://forums.developer.apple.com/message/159201#159201\">entire thread</a> on Apple’s Developer Forums with motivations behind this change (you need to register as developer to read it).</p><p>However the trick is to avoid using <code class=\"highlighter-rouge\">layer.mask</code> on the view that contains the <code class=\"highlighter-rouge\">UIVisualEffectView</code> as subview or on the <code class=\"highlighter-rouge\">UIVisualEffectView</code> itself as we used to do. Instead you are supposed to use <code class=\"highlighter-rouge\">layer.maskView</code> or, if you just need rounded corners, the <code class=\"highlighter-rouge\">layer.cornerRadius</code> property associated with <code class=\"highlighter-rouge\">layer.masksToBounds = true</code>.</p><p>I’ve also found that if you try to add an external shadow to the container view’s layer, you’ll end up without blur. The trick is to set the shadow inside <code class=\"highlighter-rouge\">func layoutSubiviews()</code> override method.</p><div class=\"language-swift highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kd\">class</span> <span class=\"kt\">BlurredRoundedView</span><span class=\"p\">:</span> <span class=\"kt\">UIView</span> <span class=\"p\">{</span>    <span class=\"k\">let</span> <span class=\"nv\">effectBackground</span> <span class=\"o\">=</span> <span class=\"kt\">UIVisualEffectView</span><span class=\"p\">(</span><span class=\"nv\">effect</span><span class=\"p\">:</span> <span class=\"n\">extraLightBlur</span><span class=\"p\">)</span>        <span class=\"kd\">required</span> <span class=\"nf\">init</span><span class=\"p\">?(</span><span class=\"n\">coder</span> <span class=\"nv\">aDecoder</span><span class=\"p\">:</span> <span class=\"kt\">NSCoder</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">coder</span><span class=\"p\">:</span> <span class=\"n\">aDecoder</span><span class=\"p\">)</span>        <span class=\"nf\">commonInit</span><span class=\"p\">()</span>    <span class=\"p\">}</span>        <span class=\"k\">override</span> <span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"kt\">CGRect</span><span class=\"p\">)</span> <span class=\"p\">{</span>        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">init</span><span class=\"p\">(</span><span class=\"nv\">frame</span><span class=\"p\">:</span> <span class=\"n\">frame</span><span class=\"p\">)</span>        <span class=\"nf\">commonInit</span><span class=\"p\">()</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">commonInit</span><span class=\"p\">()</span>  <span class=\"p\">{</span>        <span class=\"nf\">initLayer</span><span class=\"p\">()</span>        <span class=\"nf\">initEffectView</span><span class=\"p\">()</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">initLayer</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">backgroundColor</span> <span class=\"o\">=</span> <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"nf\">clearColor</span><span class=\"p\">()</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span> <span class=\"n\">cornerRadius</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">masksToBounds</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>    <span class=\"p\">}</span>        <span class=\"kd\">func</span> <span class=\"nf\">initEffectView</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"n\">effectBackground</span><span class=\"o\">.</span><span class=\"n\">frame</span> <span class=\"o\">=</span> <span class=\"n\">bounds</span>        <span class=\"n\">effectBackground</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">cornerRadius</span> <span class=\"o\">=</span> <span class=\"n\">cornerRadius</span>        <span class=\"n\">effectBackground</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">masksToBounds</span> <span class=\"o\">=</span> <span class=\"kc\">true</span>        <span class=\"nf\">addSubview</span><span class=\"p\">(</span><span class=\"n\">effectBackground</span><span class=\"p\">)</span>        <span class=\"nf\">sendSubviewToBack</span><span class=\"p\">(</span><span class=\"n\">effectBackground</span><span class=\"p\">)</span>    <span class=\"p\">}</span>        <span class=\"k\">override</span> <span class=\"kd\">func</span> <span class=\"nf\">layoutSubviews</span><span class=\"p\">()</span> <span class=\"p\">{</span>        <span class=\"k\">super</span><span class=\"o\">.</span><span class=\"nf\">layoutSubviews</span><span class=\"p\">()</span>        <span class=\"k\">let</span> <span class=\"nv\">shadowPath</span> <span class=\"o\">=</span> <span class=\"kt\">UIBezierPath</span><span class=\"p\">(</span><span class=\"nv\">roundedRect</span><span class=\"p\">:</span> <span class=\"n\">bounds</span><span class=\"p\">,</span> <span class=\"nv\">cornerRadius</span><span class=\"p\">:</span> <span class=\"n\">cornerRadius</span><span class=\"p\">)</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">masksToBounds</span> <span class=\"o\">=</span> <span class=\"kc\">false</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">shadowColor</span> <span class=\"o\">=</span> <span class=\"kt\">UIColor</span><span class=\"o\">.</span><span class=\"nf\">lightGrayColor</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"kt\">CGColor</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">shadowOffset</span> <span class=\"o\">=</span> <span class=\"kt\">CGSizeMake</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">shadowOpacity</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">shadowRadius</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>        <span class=\"n\">layer</span><span class=\"o\">.</span><span class=\"n\">shadowPath</span> <span class=\"o\">=</span> <span class=\"n\">shadowPath</span><span class=\"o\">.</span><span class=\"kt\">CGPath</span>    <span class=\"p\">}</span><span class=\"p\">}</span></code></pre></div></div><p>I’ve prepared an <a href=\"/g/blurred-rounded-view.zip\">Xcode playground</a> to show the final result.</p><p><img src=\"http://0.0.0.0:4000/assets/images/rounded-blurred-uiview.jpg#center320\" alt=\"Final Rounded Blurred View\" /></p><p>Once you know how to achieve the desired result, it’s really simple. Enjoy.</p>",
            "url": "http://0.0.0.0:4000/ios/2016/08/10/blurred-rounded-uiview.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/blurred-view@2x.png",
            
            
            
            
            "tags": [
                
                  "ios",
                
                  "playground"
                
            ],
            
            "date_published": "2016-08-10T22:21:00+02:00",
            "date_modified": "2016-08-10T22:21:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/build/2016/08/09/libjpeg-turbo-with-bitcode.html",
            "title": "libjpeg-turbo with bitcode",
            "summary": "",
            "content_text": "For a little side project I’m developing for iOS, I needed to build libjpeg-turbo.Unfortunately the binary provided by the project maintainers doesn’t include bitcode and even if at the moment it’s not compulsory (unless you are targeting WatchOS), I like to be future proof, as Apple will eventually require it to be included in every app binary.I’ve found a dedicated repository by David Hoerl with instructions to build libjpeg-turbo for iOS, but unfortunately it doesn’t include bitcode too.In the issues on GitHub there’s a build script to build with bitcode enabled, but with the current SDK versions it fails.This is an updated version with some optimizations:  Developer tools and SDK paths are automatically detected, so it should be compatible even with future Xcode versions (tested with Xcode 7.2.1, 7.3.1 and 8.0 β4).  Install required packages: libtool, automake, autoconf, nasm.  Creates a Universal Binary library with simulator and device architectures.Instructions:  Install Xcode and command line tools.  Install Homebrew on your Mac.  Open terminal and cd into a temporary directory.Download and run the script that your can find here with just a single line of code.curl -s https://macteo.it/g/libturbo-jpeg.sh | bashI’m not responsible if something goes wrong.You’ll find the fat library with bitcode inside the ../libs/universal folder.  Architectures in the fat file: libturbojpeg.a are: armv7 armv7s i386 x86_64 arm64🎉The process seems to be confirmed.I also sent a test build including bitcode to iTunes Connect, it has been processed successfully and it is now available (privately) on TestFlight.",
            "content_html": "<p>For a little side project I’m developing for iOS, I needed to build <a href=\"http://libjpeg-turbo.virtualgl.org\">libjpeg-turbo</a>.</p><p>Unfortunately the binary provided by the project maintainers doesn’t include <a href=\"https://developer.apple.com/library/tvos/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html\">bitcode</a> and even if at the moment it’s not compulsory (unless you are targeting <em>WatchOS</em>), I like to be future proof, as Apple will eventually require it to be included in every app binary.</p><p>I’ve found a <a href=\"https://github.com/dhoerl/libjpeg-turbo-builder\">dedicated repository</a> by <a href=\"https://github.com/dhoerl\">David Hoerl</a> with instructions to build <code class=\"highlighter-rouge\">libjpeg-turbo</code> for iOS, but unfortunately it doesn’t include bitcode too.</p><p>In the issues on GitHub there’s a <a href=\"https://github.com/libjpeg-turbo/libjpeg-turbo/issues/5\">build script</a> to build with bitcode enabled, but with the current SDK versions it fails.</p><p>This is an updated version with some optimizations:</p><ul>  <li>Developer tools and SDK paths are automatically detected, so it should be compatible even with future Xcode versions (tested with Xcode 7.2.1, 7.3.1 and 8.0 β4).</li>  <li>Install required packages: <code class=\"highlighter-rouge\">libtool</code>, <code class=\"highlighter-rouge\">automake</code>, <code class=\"highlighter-rouge\">autoconf</code>, <code class=\"highlighter-rouge\">nasm</code>.</li>  <li>Creates a Universal Binary library with simulator and device architectures.</li></ul><h4 id=\"instructions\">Instructions:</h4><ul>  <li>Install Xcode and command line tools.</li>  <li>Install <a href=\"http://brew.sh\">Homebrew</a> on your Mac.</li>  <li>Open terminal and <code class=\"highlighter-rouge\">cd</code> into a temporary directory.</li></ul><p>Download and run the script that your can find <a href=\"/g/libturbo-jpeg.sh\">here</a> with just a single line of code.</p><div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-s</span> https://macteo.it/g/libturbo-jpeg.sh | bash</code></pre></div></div><p><strong>I’m not responsible if something goes wrong.</strong></p><p>You’ll find the fat library with bitcode inside the <code class=\"highlighter-rouge\">../libs/universal</code> folder.</p><blockquote>  <p>Architectures in the fat file: libturbojpeg.a are: armv7 armv7s i386 x86_64 arm64</p></blockquote><p>🎉</p><p>The process <a href=\"https://github.com/libjpeg-turbo/libjpeg-turbo/issues/5#issuecomment-238588594\">seems to be confirmed</a>.</p><p>I also sent a test build including bitcode to iTunes Connect, it has been processed successfully and it is now available (privately) on TestFlight.</p>",
            "url": "http://0.0.0.0:4000/build/2016/08/09/libjpeg-turbo-with-bitcode.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/bitcode@2x.png",
            
            
            
            
            "tags": [
                
                  "build",
                
                  "ios",
                
                  "xcode"
                
            ],
            
            "date_published": "2016-08-09T21:14:00+02:00",
            "date_modified": "2016-08-09T21:14:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/california/2016/08/07/we-were-here.html",
            "title": "We were here",
            "summary": "",
            "content_text": "Last night we slept here.Amazing.",
            "content_html": "<p><img src=\"http://0.0.0.0:4000/assets/images/panorama_cali-s.jpg#center100r\" alt=\"Panorama Cali Giau\" /></p><p>Last night we slept here.</p><p>Amazing.</p>",
            "url": "http://0.0.0.0:4000/california/2016/08/07/we-were-here.html",
            
            "image": "http://0.0.0.0:4000/assets/imageslogos/cali.svg",
            
            
            
            
            "date_published": "2016-08-07T20:04:00+02:00",
            "date_modified": "2016-08-07T20:04:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/blog/mac/dev/2016/07/23/macdown-fork.html",
            "title": "MacDown fork",
            "summary": "",
            "content_text": "I just forked MacDown, a popular open-source markdown editor for Mac as I have a few ideas to improve it to better suit my needs.I’m looking to add some features that I wasn’t able to find in any other Mac editor to help me write blog posts. This blog like many others is powered by Jekyll, a ruby application capable to parse markdown formatted text files and generate a static website.What I’m missing from MacDown is the ability to seamlessly write and preview my posts exactly1 as they will appear on the website. I’m currently able to do it with the combination of 7 apps:  Atom (or any other text editor like MacDown itself) to write the post and  Terminal, to run the command bundle exec guard that launches  Guard that tells  Jekyll to regenerate the pages as soon as the file is modified and saved to disk, and also run  guard-livereload that in combination with the  LiveReload Safari Extension can reload the page in  Safari as soon as a new version is available.What I’m aiming for is to be able to reduce the amount of apps needed to obtain the same result. With just 40 added and 4 removed lines to the MacDown source code, I made a hack to remove from the workflow Atom, Guard, guard-livereload, the LiveReload Safari Extension and Safari itself reducing the needed apps to just three2.    Your browser does not support HTML5 video.Every second MacDown saves to disk the currently open document so Jekyll generates the new version. MacDown also won’t show the internally rendered preview (with custom CSS), but loads the file  generated by Jekyll itself from disk with the proper stylesheet,exactly as it will appear and render in production.I’m really happy with this solution as MacDown already has mostly of the features I need like: ability to hide and show the preview with ⇧⌘H, spell checking (using macOS standard APIs), fullscreen support, scroll sync between editor and preview, custom editor fonts, resizable preview (great to test responsive websites) and quick text search within the document.The features I’m looking to add are:  Proper live website preview (not a hack anymore).  Quick document selector.  Automatically infer the rendered html path from the frontmatter parameters.  Sidebar for file and folders navigation.  Link to open the rendered file on an external website.  Open the currently previewed file in the editor when navigating the site.  Highlight links in the editor and generally improve the editor view.  Customisable buttons to start and stop Jekyll, generate the production site and deploy3 it to the remote server.I’d also like to support javascript and css editing with syntax highlight, but that’s really an optional feature. It would be also interesting to embed Jekyll inside the app bundle to create a self contained solution.I still haven’t decided how to distribute the app, but surely I’ll develop those new features and release them publicly on GitHub. It will be a different direction for the MacDown app so I’m not sure if those features will make sense inside the original app, if they do I’ll try to submit some pull requests. I’ll probably try to contact the original author to discuss a solution if and when those new features will be ready. Fortunately the MIT license chosen by the author is really permissive.            MacDown itself can live preview the document with a custom theme, or you can use Marked if you prefer to use a more capable external application. However using them you won’t be able to preview the page exactly as it will appear on your production website. &amp;#8617;              Full disclosure: I’ve also added Xcode as dependency because to change the file to preview I need to recompile the app, but that’s a rough hack, as I already said. &amp;#8617;              At the moment I just rsync the site folder to my remote VPS. &amp;#8617;      ",
            "content_html": "<p>I just forked <a href=\"http://macdown.uranusjr.com\">MacDown</a>, a popular open-source markdown editor for Mac as I have a few ideas to improve it to better suit my needs.</p><p>I’m looking to add some features that I wasn’t able to find in any other Mac editor to help me write blog posts. This blog like many others is powered by <a href=\"http://jekyllrb.com\">Jekyll</a>, a ruby application capable to parse <a href=\"http://daringfireball.net/projects/markdown/syntax\">markdown formatted</a> text files and generate a <a href=\"https://www.smashingmagazine.com/2015/11/modern-static-website-generators-next-big-thing/\">static website</a>.</p><p>What I’m missing from MacDown is the ability to seamlessly write and preview my posts <strong>exactly</strong><sup id=\"fnref:1\"><a href=\"#fn:1\" class=\"footnote\">1</a></sup> as they will appear on the website. I’m currently able to do it with the combination of 7 apps:</p><ul>  <li><a href=\"https://atom.io\">Atom</a> (or any other text editor like MacDown itself) to write the post and</li>  <li><a href=\"https://en.wikipedia.org/wiki/Terminal_(OS_X)\">Terminal</a>, to run the command <code class=\"highlighter-rouge\">bundle exec guard</code> that launches</li>  <li><a href=\"https://github.com/guard/guard\">Guard</a> that tells</li>  <li><a href=\"http://jekyllrb.com\">Jekyll</a> to regenerate the pages as soon as the file is modified and saved to disk, and also run</li>  <li><a href=\"https://github.com/guard/guard-livereload\">guard-livereload</a> that in combination with the</li>  <li><a href=\"http://livereload.com/extensions/\">LiveReload Safari Extension</a> can reload the page in</li>  <li><a href=\"https://en.wikipedia.org/wiki/Safari_(web_browser)\">Safari</a> as soon as a new version is available.</li></ul><p>What I’m aiming for is to be able to reduce the amount of apps needed to obtain the same result. With just <a href=\"https://github.com/macteo/macdown/commit/e5d28fd0d570b6856b2ce0146c36fbcc3a29a649\">40 added and 4 removed lines</a> to the MacDown source code, I made a hack to remove from the workflow <a href=\"https://atom.io\">Atom</a>, <a href=\"https://github.com/guard/guard\">Guard</a>, <a href=\"https://github.com/guard/guard-livereload\">guard-livereload</a>, the <a href=\"http://livereload.com/extensions/\">LiveReload Safari Extension</a> and <a href=\"https://en.wikipedia.org/wiki/Safari_(web_browser)\">Safari</a> itself reducing the needed apps to just three<sup id=\"fnref:2\"><a href=\"#fn:2\" class=\"footnote\">2</a></sup>.</p><video width=\"100%\" controls=\"\" class=\"bordered\">  <source src=\"http://0.0.0.0:4000/assets/videos/macdown-fork-live-preview.m4v\" type=\"video/mp4\" />  Your browser does not support HTML5 video.</video><p>Every second MacDown saves to disk the currently open document so Jekyll generates the new version. MacDown also won’t show the internally rendered preview (with custom CSS), but loads the file  generated by Jekyll itself from disk with the proper stylesheet,exactly as it will appear and render in production.</p><p>I’m really happy with this solution as MacDown already has mostly of the features I need like: ability to hide and show the preview with ⇧⌘H, spell checking (using macOS standard APIs), fullscreen support, scroll sync between editor and preview, custom editor fonts, resizable preview (great to test responsive websites) and quick text search within the document.</p><p>The <strong>features</strong> I’m looking to add are:</p><ul>  <li>Proper live website preview (not a hack anymore).</li>  <li>Quick document selector.</li>  <li>Automatically infer the rendered html path from the <a href=\"https://jekyllrb.com/docs/frontmatter/\">frontmatter</a> parameters.</li>  <li>Sidebar for file and folders navigation.</li>  <li>Link to open the rendered file on an external website.</li>  <li>Open the currently previewed file in the editor when navigating the site.</li>  <li>Highlight links in the editor and generally improve the editor view.</li>  <li>Customisable buttons to start and stop Jekyll, generate the production site and deploy<sup id=\"fnref:3\"><a href=\"#fn:3\" class=\"footnote\">3</a></sup> it to the remote server.</li></ul><p>I’d also like to support <em>javascript</em> and <em>css</em> editing with syntax highlight, but that’s really an optional feature. It would be also interesting to embed <a href=\"http://jekyllrb.com\">Jekyll</a> inside the app bundle to create a self contained solution.</p><p>I still haven’t decided how to distribute the app, but surely I’ll develop those new features and release them publicly on GitHub. It will be a different direction for the MacDown app so I’m not sure if those features will make sense inside the original app, if they do I’ll try to submit some pull requests. I’ll probably try to contact the <a href=\"https://twitter.com/uranusjr\">original author</a> to discuss a solution if and when those new features will be ready. Fortunately the MIT license chosen by the author is really permissive.</p><div class=\"footnotes\">  <ol>    <li id=\"fn:1\">      <p>MacDown itself can live preview the document with a custom theme, or you can use <a href=\"http://marked2app.com\">Marked</a> if you prefer to use a more capable external application. However using them you won’t be able to preview the page <em>exactly</em> as it will appear on your production website. <a href=\"#fnref:1\" class=\"reversefootnote\">&#8617;</a></p>    </li>    <li id=\"fn:2\">      <p>Full disclosure: I’ve also added <a href=\"https://en.wikipedia.org/wiki/Xcode\">Xcode</a> as dependency because to change the file to preview I need to recompile the app, but that’s a rough hack, as I already said. <a href=\"#fnref:2\" class=\"reversefootnote\">&#8617;</a></p>    </li>    <li id=\"fn:3\">      <p>At the moment I just <code class=\"highlighter-rouge\">rsync</code> the site folder to my remote VPS. <a href=\"#fnref:3\" class=\"reversefootnote\">&#8617;</a></p>    </li>  </ol></div>",
            "url": "http://0.0.0.0:4000/blog/mac/dev/2016/07/23/macdown-fork.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/macdown@2x.png",
            
            
            
            
            "tags": [
                
                  "mac",
                
                  "dev",
                
                  "macdown",
                
                  "markdown",
                
                  "editor"
                
            ],
            
            "date_published": "2016-07-23T12:41:00+02:00",
            "date_modified": "2016-07-23T12:41:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        },
    
        {
            "id": "http://0.0.0.0:4000/script/mac/2016/07/21/update-all-the-things.html",
            "title": "Update all the things",
            "summary": "",
            "content_text": "I use this little script to keep my mac tools updated and clean.It works if you have Homebrew and ruby installed as standard user (I use rvm).brew updatebrew upgradebrew cleanupgem updategem cleanupI know they’re just 5 commands, but I love to be up to date my two computers (an iMac and a MacBook), so it’s a convenient way to just merge them. I also decided to avoid using cron to run the script every day because I need to do it deliberately as the upgrade process can even break my workflow. It also includes the cleanup phase to free disk space removing outdated stuff.You can find the raw version here.I saved the file in the /usr/local/bin/ folder named update and made it executable chmod +x /usr/local/bin/update so it can be run from everywhere.If you feel really adventurous (the remote file can be changed at any time - use at your own risk) you can even execute it remotely.curl -s https://macteo.it/g/update.sh | bash",
            "content_html": "<p>I use this little script to keep my mac tools updated and clean.It works if you have <a href=\"https://brew.sh\">Homebrew</a> and ruby installed as standard user (I use <a href=\"http://rvm.io\">rvm</a>).</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>brew updatebrew upgradebrew cleanupgem updategem cleanup</code></pre></div></div><p>I know they’re just 5 commands, but I love to be up to date my two computers (an <a href=\"http://www.everymac.com/systems/apple/imac/specs/imac-core-i7-3.4-27-inch-aluminum-mid-2011-thunderbolt-specs.html\">iMac</a> and a <a href=\"http://www.everymac.com/systems/apple/macbook/specs/macbook-core-m7-1.3-12-early-2016-specs.html\">MacBook</a>), so it’s a convenient way to just merge them. I also decided to avoid using cron to run the script every day because I need to do it deliberately as the upgrade process can even break my workflow. It also includes the <code class=\"highlighter-rouge\">cleanup</code> phase to free disk space removing outdated stuff.</p><p>You can find the raw version <a href=\"/g/update.sh\">here</a>.</p><p>I saved the file in the <code class=\"highlighter-rouge\">/usr/local/bin/</code> folder named <code class=\"highlighter-rouge\">update</code> and made it executable <code class=\"highlighter-rouge\">chmod +x /usr/local/bin/update</code> so it can be run from everywhere.</p><p>If you feel really adventurous (the remote file can be changed at any time - use at your own risk) you can even execute it remotely.</p><div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>curl <span class=\"nt\">-s</span> https://macteo.it/g/update.sh | bash</code></pre></div></div>",
            "url": "http://0.0.0.0:4000/script/mac/2016/07/21/update-all-the-things.html",
            
            "image": "http://0.0.0.0:4000/assets/imagesicons/update@2x.png",
            
            
            
            
            "tags": [
                
                  "script",
                
                  "mac"
                
            ],
            
            "date_published": "2016-07-21T12:04:00+02:00",
            "date_modified": "2016-07-21T12:04:00+02:00",
            "author": {
                "name": "",
                "url": "https://twitter.com/macteo"
            }
        }
    
    ]
}